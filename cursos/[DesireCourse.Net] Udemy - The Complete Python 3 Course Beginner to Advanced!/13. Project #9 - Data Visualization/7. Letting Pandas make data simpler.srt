1

00:00:00,000  -->  00:00:01,410
Alright guys, we're going to break away

2

00:00:01,410  -->  00:00:04,230
from matplotlib here for a few minutes

3

00:00:04,230  -->  00:00:05,400
and we're going to talk about another

4

00:00:05,400  -->  00:00:06,870
library that we're actually going to be

5

00:00:06,870  -->  00:00:09,630
using in conjunction with matplotlib, and

6

00:00:09,630  -->  00:00:13,230
that library is called pandas. So, I've

7

00:00:13,230  -->  00:00:15,480
got a little cheat sheet here which they

8

00:00:15,480  -->  00:00:19,170
have just added I think with their most

9

00:00:19,170  -->  00:00:22,050
recent update of the Python library, and

10

00:00:22,050  -->  00:00:24,539
basically what this does is it

11

00:00:24,539  -->  00:00:28,230
simplifies the process of creating data.

12

00:00:28,230  -->  00:00:31,289
And what I mean by that is you can see

13

00:00:31,289  -->  00:00:36,450
here in the example basically you know

14

00:00:36,450  -->  00:00:42,510
you can create items easier, I guess. So,

15

00:00:42,510  -->  00:00:44,370
I'm going to show you an example of how

16

00:00:44,370  -->  00:00:47,399
to do that, and basically I'm going to

17

00:00:47,399  -->  00:00:49,590
write one the first way without using

18

00:00:49,590  -->  00:00:50,969
pandas, then we're going to install

19

00:00:50,969  -->  00:00:54,149
pandas and see how much quicker it is. So,

20

00:00:54,149  -->  00:00:56,370
doing it this way we're going to assume

21

00:00:56,370  -->  00:00:58,500
that, and this is for the pie chart that

22

00:00:58,500  -->  00:00:59,579
we're going to be creating after

23

00:00:59,579  -->  00:01:01,410
probably in the next video, we're going

24

00:01:01,410  -->  00:01:04,769
to assume that we are working as a data

25

00:01:04,769  -->  00:01:07,799
analyst for a call center that deals

26

00:01:07,799  -->  00:01:11,400
with technical support, and we are going

27

00:01:11,400  -->  00:01:16,890
to have data of completed issues. You

28

00:01:16,890  -->  00:01:18,180
know how when you call into your phone

29

00:01:18,180  -->  00:01:20,070
company or your internet company and you

30

00:01:20,070  -->  00:01:22,710
have a problem, if they resolve the

31

00:01:22,710  -->  00:01:23,700
issue. So we're going to call this

32

00:01:23,700  -->  00:01:29,490
issues resolved. So, normally how we would

33

00:01:29,490  -->  00:01:31,290
do this is we would create a dictionary

34

00:01:31,290  -->  00:01:35,189
and each item in the dictionary is going

35

00:01:35,189  -->  00:01:40,439
to be a person, or something. So, for

36

00:01:40,439  -->  00:01:45,810
instance, name is going to be Nick,

37

00:01:45,810  -->  00:01:50,729
we're going to say January issues

38

00:01:50,729  -->  00:01:53,670
resolved, it's going to be equal to 27

39

00:01:53,670  -->  00:01:56,610
which isn't a lot so let's make that 124.

40

00:01:56,610  -->  00:02:04,649
Feburary issues resolved equals 100,

41

00:02:04,649  -->  00:02:07,229
and it's going to be a quarterly report

42

00:02:07,229  -->  00:02:10,910
so we're going to do March as well.

43

00:02:11,370  -->  00:02:15,299
It's going to be one of the 165. Alright, now

44

00:02:15,299  -->  00:02:18,450
having created this we can then take

45

00:02:18,450  -->  00:02:21,330
this object, and normally we would have

46

00:02:21,330  -->  00:02:24,269
to just write it out multiple times,

47

00:02:24,269  -->  00:02:27,840
actually let me indent this. This for

48

00:02:27,840  -->  00:02:30,090
some reason is indenting with eight

49

00:02:30,090  -->  00:02:38,790
spaces now instead of four, which is not

50

00:02:38,790  -->  00:02:41,879
good. Alright, so now the second person

51

00:02:41,879  -->  00:02:48,450
in here is going to be named, there

52

00:02:48,450  -->  00:02:50,220
straightened that up, is going to be named

53

00:02:50,220  -->  00:02:57,180
Panda. I'm just going to have to use 8

54

00:02:57,180  -->  00:02:59,640
space indentation for now, and

55

00:02:59,640  -->  00:03:03,239
we're going to specify January issues

56

00:03:03,239  -->  00:03:06,690
resolved for Panda, and it's going to be 112.

57

00:03:06,690  -->  00:03:11,790
Feburary issues resolved is going to

58

00:03:11,790  -->  00:03:18,450
be 143, and March she got fired so she

59

00:03:18,450  -->  00:03:20,609
only had 3 issues resolved before

60

00:03:20,609  -->  00:03:23,370
getting fired. And it would take a while

61

00:03:23,370  -->  00:03:26,370
to create an object like this, and we could

62

00:03:26,370  -->  00:03:29,579
create a more programmatic way to do it,

63

00:03:29,579  -->  00:03:33,389
but why should we have to when we can do

64

00:03:33,389  -->  00:03:35,940
it really easily using the pandas

65

00:03:35,940  -->  00:03:39,239
library. So, open up your terminal or

66

00:03:39,239  -->  00:03:42,150
command prompt, type in pip3 install

67

00:03:42,150  -->  00:03:45,629
pandas, I've got mine installed. If you're

68

00:03:45,629  -->  00:03:47,489
on Linux i believe you should just be

69

00:03:47,489  -->  00:03:51,449
using pip depending on your system setup,

70

00:03:51,449  -->  00:03:54,329
not pip3, and then we can actually

71

00:03:54,329  -->  00:04:03,209
import pandas as pd. So, this is the old

72

00:04:03,209  -->  00:04:05,430
way of doing it and if we wanted five

73

00:04:05,430  -->  00:04:09,150
different items here, we would seriously

74

00:04:09,150  -->  00:04:11,940
have to do this, okay, and that takes up

75

00:04:11,940  -->  00:04:18,209
about 30 lines just to create that, and imagine that the data's diffferent. So, what we can

76

00:04:18,209  -->  00:04:21,709
do instead is we can create

77

00:04:21,709  -->  00:04:27,710
a new object where we pass in names, and

78

00:04:27,710  -->  00:04:30,139
then we're going to create a list of

79

00:04:30,139  -->  00:04:44,599
different names. Alright, so now we've got the

80

00:04:44,599  -->  00:04:47,150
five names, then we drop a line and we

81

00:04:47,150  -->  00:04:50,509
say January issues resolved, and then

82

00:04:50,509  -->  00:04:51,740
we're going to create a list and each

83

00:04:51,740  -->  00:04:53,090
one of these is going to correspond to

84

00:04:53,090  -->  00:05:00,410
each person's name. So, 143, 122, 101, 106,

85

00:05:00,410  -->  00:05:05,900
and 365, and then we're going to say

86

00:05:05,900  -->  00:05:10,699
February's issues resolved and we're

87

00:05:10,699  -->  00:05:18,889
going to do the same thing, and then

88

00:05:18,889  -->  00:05:24,710
March issues resolved I'm going to say

89

00:05:24,710  -->  00:05:32,030
65, 88, 12, 32, and 65. Alright, so now what

90

00:05:32,030  -->  00:05:33,889
we've got we've essentially got the same

91

00:05:33,889  -->  00:05:36,770
data in here in four lines of code that

92

00:05:36,770  -->  00:05:41,000
we do here in 30, and that's because we've

93

00:05:41,000  -->  00:05:43,159
simplified it instead of writing each

94

00:05:43,159  -->  00:05:46,009
key you know five times we just write it

95

00:05:46,009  -->  00:05:49,250
once and then pass lists in, and in this

96

00:05:49,250  -->  00:05:51,710
format we can then pass it into pandas

97

00:05:51,710  -->  00:05:53,599
to create a data frame work that

98

00:05:53,599  -->  00:05:56,120
essentially makes this out of it. So I'm

99

00:05:56,120  -->  00:05:57,919
going to show you guys how to do that. So

100

00:05:57,919  -->  00:05:59,389
we're going to create a variable

101

00:05:59,389  -->  00:06:01,880
for the data framework called df, and it's

102

00:06:01,880  -->  00:06:05,330
going to be equal to pd.DataFrame, and

103

00:06:05,330  -->  00:06:08,180
in here we're going to pass in the data

104

00:06:08,180  -->  00:06:15,020
so raw_data, and then we're going to tell

105

00:06:15,020  -->  00:06:19,219
it what columns are what. So, in a list

106

00:06:19,219  -->  00:06:28,219
here names, jan_ir, feb_ir,

107

00:06:28,219  -->  00:06:31,639
and march_ir.

108

00:06:31,639  -->  00:06:38,060
Now this has already created our

109

00:06:38,060  -->  00:06:41,840
object here, so I can go ahead and print

110

00:06:41,840  -->  00:06:46,279
out df, save this and refresh, and

111

00:06:46,279  -->  00:06:47,449
you're going to see that the data has

112

00:06:47,449  -->  00:06:51,199
been printed out in a pretty format. So

113

00:06:51,199  -->  00:06:53,419
we've got a list of names from

114

00:06:53,419  -->  00:06:55,340
the left hand side, and you know it

115

00:06:55,340  -->  00:06:57,409
creates it like this, so each person has

116

00:06:57,409  -->  00:06:59,060
its own row, so we can do really

117

00:06:59,060  -->  00:07:01,340
neat things as though the data were in

118

00:07:01,340  -->  00:07:03,439
this format at this point. So I'm going

119

00:07:03,439  -->  00:07:06,110
to just keep that there, actually. We're

120

00:07:06,110  -->  00:07:09,080
going to add a row to each person called

121

00:07:09,080  -->  00:07:12,889
totals. So, let's go ahead and write df[

122

00:07:12,889  -->  00:07:20,150
'total_ir'] and it's going to be equal to

123

00:07:20,150  -->  00:07:33,319
df['jan_ir'] plus df['feb_ir'] and then

124

00:07:33,319  -->  00:07:41,330
df['mar_ir'] and with just a simple

125

00:07:41,330  -->  00:07:43,430
line instead of putting in a for loop,

126

00:07:43,430  -->  00:07:45,560
which with this I would have to do that.

127

00:07:45,560  -->  00:07:49,939
I'd have to say for person in data,

128

00:07:49,939  -->  00:07:55,669
then i'd have to say person total you

129

00:07:55,669  -->  00:07:56,870
know, and then I'd have to write that

130

00:07:56,870  -->  00:07:58,339
line out and it would have to compute it

131

00:07:58,339  -->  00:08:01,099
for each item in there, but what I can do

132

00:08:01,099  -->  00:08:03,770
here as I save it and it's created

133

00:08:03,770  -->  00:08:07,729
a new column for total that actually

134

00:08:07,729  -->  00:08:10,969
works as a total combined of all these.

135

00:08:10,969  -->  00:08:13,699
So this is a very basic example of

136

00:08:13,699  -->  00:08:16,219
pandas, and we're going to probably be

137

00:08:16,219  -->  00:08:18,050
jumping into this more as well just so

138

00:08:18,050  -->  00:08:20,300
that we can do some really scientific

139

00:08:20,300  -->  00:08:23,210
things apart from charting and stuff, and

140

00:08:23,210  -->  00:08:26,990
we are going to be using pandas a little

141

00:08:26,990  -->  00:08:28,909
bit with making charts. So we're actually

142

00:08:28,909  -->  00:08:30,830
going to do that in the next video in

143

00:08:30,830  -->  00:08:36,050
making a chart for for this data that

144

00:08:36,050  -->  00:08:37,610
we've just constructed right here. So at

145

00:08:37,610  -->  00:08:39,740
this point I can remove this unnecessary

146

00:08:39,740  -->  00:08:45,069
30 lines of code, and just leave this.
