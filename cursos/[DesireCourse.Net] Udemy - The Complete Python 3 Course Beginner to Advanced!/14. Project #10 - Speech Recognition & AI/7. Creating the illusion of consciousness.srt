1

00:00:00,000  -->  00:00:02,490
Alright guys, what we are going to be

2

00:00:02,490  -->  00:00:06,359
doing at this point is adding a little

3

00:00:06,359  -->  00:00:08,940
bit of artificial intelligence here. It's

4

00:00:08,940  -->  00:00:11,700
artificial in the truest sense of that

5

00:00:11,700  -->  00:00:13,679
word. We're not actually going to create

6

00:00:13,679  -->  00:00:15,420
a brain, and we're not going to give our

7

00:00:15,420  -->  00:00:17,760
machine the capability of storing

8

00:00:17,760  -->  00:00:21,990
memories, and then when new data is put

9

00:00:21,990  -->  00:00:24,930
in like audio or you know if we were

10

00:00:24,930  -->  00:00:27,720
really smart people we'd be creating an

11

00:00:27,720  -->  00:00:30,390
AI that can see, but we're not going to

12

00:00:30,390  -->  00:00:31,920
be doing that, that would be a real

13

00:00:31,920  -->  00:00:34,140
challenge. Anyway, what we're going to be

14

00:00:34,140  -->  00:00:36,840
doing we're not going to be creating

15

00:00:36,840  -->  00:00:41,100
life, or consciousness, or awareness, we're

16

00:00:41,100  -->  00:00:43,020
just going to give the illusion of

17

00:00:43,020  -->  00:00:45,930
consciousness or awareness by when we

18

00:00:45,930  -->  00:00:48,750
ask the program something it is going to

19

00:00:48,750  -->  00:00:50,820
parse the internet, very specifically by

20

00:00:50,820  -->  00:00:53,010
the way, I'm programming this very simply.

21

00:00:53,010  -->  00:00:55,110
You could extend this so much further

22

00:00:55,110  -->  00:00:56,579
and I'm going to provide a few examples

23

00:00:56,579  -->  00:00:59,609
of how you would when we're done. What

24

00:00:59,609  -->  00:01:02,250
I'm going to do is we're going to be

25

00:01:02,250  -->  00:01:04,530
scraping the web to find our answer, so

26

00:01:04,530  -->  00:01:07,409
we need to be able to ask a question, be

27

00:01:07,409  -->  00:01:09,869
able to parse it correctly, and be able

28

00:01:09,869  -->  00:01:13,439
to get the response or the correct

29

00:01:13,439  -->  00:01:16,650
answer, and then we you know make our

30

00:01:16,650  -->  00:01:20,220
computer or our program here speak back

31

00:01:20,220  -->  00:01:21,960
to us and tell us the answer, so it will

32

00:01:21,960  -->  00:01:24,840
be sort of like a dialogue. So we've

33

00:01:24,840  -->  00:01:27,030
already got the audio sorted out here,

34

00:01:27,030  -->  00:01:28,799
and I'm actually going to go ahead and

35

00:01:28,799  -->  00:01:30,990
create a new audio recording so that you

36

00:01:30,990  -->  00:01:35,759
can hear, alright. I have to actually

37

00:01:35,759  -->  00:01:38,610
change my sound settings in here as well

38

00:01:38,610  -->  00:01:42,150
to make the output device the

39

00:01:42,150  -->  00:01:44,430
two-channel sound loud as well so that

40

00:01:44,430  -->  00:01:46,740
it can actually record into here. So let's

41

00:01:46,740  -->  00:01:51,060
go ahead and record, and I'll just

42

00:01:51,060  -->  00:01:53,100
compile you know the audio track and

43

00:01:53,100  -->  00:01:55,500
then this screen recording in the video

44

00:01:55,500  -->  00:01:56,939
editor, and then you guys will see the

45

00:01:56,939  -->  00:01:58,439
end result. So it's kind of irrelevant,

46

00:01:58,439  -->  00:02:00,030
don't worry about what I was doing there.

47

00:02:00,030  -->  00:02:02,130
So what we're going to do now though is

48

00:02:02,130  -->  00:02:04,799
we're going to create a separate little

49

00:02:04,799  -->  00:02:06,600
project and then we're going to connect

50

00:02:06,600  -->  00:02:09,030
the two. So what this project is going to do

51

00:02:09,030  -->  00:02:12,800
is it's going to be a class that we can

52

00:02:12,800  -->  00:02:16,940
access in order to

53

00:02:16,940  -->  00:02:20,300
basically scrape a certain question, so

54

00:02:20,300  -->  00:02:25,730
let's go ahead and get started. I'm going

55

00:02:25,730  -->  00:02:27,440
to create a new Python file here

56

00:02:27,440  -->  00:02:34,130
called get_answer.py and then we're

57

00:02:34,130  -->  00:02:36,350
going to need to make a lot of imports,

58

00:02:36,350  -->  00:02:37,670
and this is stuff that we actually

59

00:02:37,670  -->  00:02:41,300
covered back in I think section three.

60

00:02:41,300  -->  00:02:43,220
It was a while ago where we did some web

61

00:02:43,220  -->  00:02:46,670
scraping and we scraped Bing, I think,

62

00:02:46,670  -->  00:02:51,500
for pictures. We set up a an interactive

63

00:02:51,500  -->  00:02:54,680
picture getter. So we're going to be

64

00:02:54,680  -->  00:02:58,850
using selenium and bs4, as well as

65

00:02:58,850  -->  00:03:02,690
urllib parse. So let's go ahead and just

66

00:03:02,690  -->  00:03:05,330
start our imports. This is a lot so I'm

67

00:03:05,330  -->  00:03:08,270
going to go over each one. So first we're

68

00:03:08,270  -->  00:03:12,500
going to import time. Now we're going to

69

00:03:12,500  -->  00:03:16,040
start our selenium imports, so the most

70

00:03:16,040  -->  00:03:17,630
important one, they're all important but the

71

00:03:17,630  -->  00:03:20,930
most important one, from selenium import

72

00:03:20,930  -->  00:03:26,270
webdriver. Then we need to import a

73

00:03:26,270  -->  00:03:29,360
class called by and that allows us to

74

00:03:29,360  -->  00:03:32,330
figure out if, well it allows us to

75

00:03:32,330  -->  00:03:34,280
target elements to try and figure out if

76

00:03:34,280  -->  00:03:38,720
an element is present. The next three are

77

00:03:38,720  -->  00:03:41,750
related to detecting elements. So, from

78

00:03:41,750  -->  00:03:48,170
selenium.webdriver.common.by

79

00:03:48,170  -->  00:03:51,890
import By, and the actual thing I'm

80

00:03:51,890  -->  00:03:53,900
importing has a capital letter. Classes

81

00:03:53,900  -->  00:03:58,459
typically have capital letters. We're

82

00:03:58,459  -->  00:04:01,040
going to import a class that allows us

83

00:04:01,040  -->  00:04:04,910
to wait for certain things, so from

84

00:04:04,910  -->  00:04:13,040
selenium.web driver.support.ui

85

00:04:13,040  -->  00:04:19,820
import WebDriverWait, this is

86

00:04:19,820  -->  00:04:23,870
camel case, again. And then we need to

87

00:04:23,870  -->  00:04:26,550
import a class that will allow us

88

00:04:26,550  -->  00:04:30,180
to determine expected conditions. So this

89

00:04:30,180  -->  00:04:31,919
as well as going to help us wait for

90

00:04:31,919  -->  00:04:33,840
certain elements to appear, and with

91

00:04:33,840  -->  00:04:36,330
Google being a dynamic system that runs

92

00:04:36,330  -->  00:04:39,389
a lot on JavaScript this is essential. So,

93

00:04:39,389  -->  00:04:46,259
from selenium.webdriver.support

94

00:04:46,259  -->  00:04:53,250
import expected_conditions as EC

95

00:04:53,250  -->  00:05:00,569
capital letters. And then we need one

96

00:05:00,569  -->  00:05:03,479
more from selenium and this is going to

97

00:05:03,479  -->  00:05:06,810
tell us if something times out, so from

98

00:05:06,810  -->  00:05:13,229
selenium.common.exceptions

99

00:05:13,229  -->  00:05:19,080
import TimeoutException.

100

00:05:19,080  -->  00:05:23,190
Again, in camelcase. Now we're going to

101

00:05:23,190  -->  00:05:26,520
import beautiful soup 4, so from bs4

102

00:05:26,520  -->  00:05:33,060
import BeautifulSoup. This is going to

103

00:05:33,060  -->  00:05:35,940
allow us to parse the returned HTML data.

104

00:05:35,940  -->  00:05:39,930
We need URL parse as well, we might not use

105

00:05:39,930  -->  00:05:45,870
it, we might, from urllib import urlparse.

106

00:05:45,870  -->  00:05:53,729
Sorry, from urllib.parse import

107

00:05:53,729  -->  00:05:58,169
urlparse, and then the final one is going to

108

00:05:58,169  -->  00:06:04,409
be sys. Alright, so, that took a while

109

00:06:04,409  -->  00:06:06,750
to import all those. What we're going to

110

00:06:06,750  -->  00:06:09,539
do now I'm going to be going over

111

00:06:09,539  -->  00:06:14,550
basically what we were doing in the last

112

00:06:14,550  -->  00:06:20,370
videos as well, and so I mean not the

113

00:06:20,370  -->  00:06:22,199
last videos but the ones where we were

114

00:06:22,199  -->  00:06:25,979
actually scraping the web. So, if you guys

115

00:06:25,979  -->  00:06:28,770
didn't do that don't worry about it

116

00:06:28,770  -->  00:06:30,870
we're going to be scraping the web now,

117

00:06:30,870  -->  00:06:36,060
so you guys will have no problem with that. So, what

118

00:06:36,060  -->  00:06:38,099
we need to do is we need to create a

119

00:06:38,099  -->  00:06:40,070
class

120

00:06:40,070  -->  00:06:45,980
called Fetcher and then define the init

121

00:06:45,980  -->  00:06:50,450
function, and we're going to take in,

122

00:06:50,450  -->  00:06:51,800
right off the bat, we're going to take in

123

00:06:51,800  -->  00:06:56,990
url. So as soon as this initializes we're

124

00:06:56,990  -->  00:06:59,990
going to initialize the driver, and then

125

00:06:59,990  -->  00:07:03,050
we're going to call a method within this

126

00:07:03,050  -->  00:07:04,610
class that will actually look up the

127

00:07:04,610  -->  00:07:07,370
data for us and return it. So we're going

128

00:07:07,370  -->  00:07:12,170
to say driver equals webdriver.

129

00:07:12,170  -->  00:07:17,900
PhantomJS. So, a little note about

130

00:07:17,900  -->  00:07:20,720
Phantom.js it's a JavaScript browser

131

00:07:20,720  -->  00:07:23,450
that runs not in a graphical user

132

00:07:23,450  -->  00:07:28,310
interface. So if you are on Mac you just

133

00:07:28,310  -->  00:07:32,630
need to run brew install phantomjs.

134

00:07:32,630  -->  00:07:36,470
Linux should be similar and I do know

135

00:07:36,470  -->  00:07:39,470
that we have some of the students

136

00:07:39,470  -->  00:07:41,720
here using Windows, if you have any

137

00:07:41,720  -->  00:07:44,060
trouble with Windows it should be as

138

00:07:44,060  -->  00:07:46,010
simple, and I say should be but Windows

139

00:07:46,010  -->  00:07:47,990
can be really overly complicated

140

00:07:47,990  -->  00:07:50,780
sometimes, it should be as simple as

141

00:07:50,780  -->  00:07:54,320
downloading the Phantom.js binary file

142

00:07:54,320  -->  00:07:57,170
that you can actually execute, putting it

143

00:07:57,170  -->  00:07:59,450
somewhere, and then making sure that file

144

00:07:59,450  -->  00:08:02,210
path is in your path environment

145

00:08:02,210  -->  00:08:05,600
variable. If you need any help doing that

146

00:08:05,600  -->  00:08:09,020
let me know. Also, I will see if I can find

147

00:08:09,020  -->  00:08:12,110
links to download Phantom.js as well.

148

00:08:12,110  -->  00:08:21,470
So right off the bat we're going to wait,

149

00:08:22,110  -->  00:08:25,170
and we're going to make the driver wait

150

00:08:25,170  -->  00:08:30,810
for 5 seconds. Then what we're

151

00:08:30,810  -->  00:08:32,850
going to do is call a method that we

152

00:08:32,850  -->  00:08:37,350
haven't yet defined called lookup, so just

153

00:08:37,350  -->  00:08:40,230
write def lookup and we're going to

154

00:08:40,230  -->  00:08:42,630
take in both the driver, actually we

155

00:08:42,630  -->  00:08:44,100
don't need to because we're going to set

156

00:08:44,100  -->  00:08:48,090
self, there we go, that's smart, self.

157

00:08:48,090  -->  00:08:52,020
driver. So now that's an instance

158

00:08:52,020  -->  00:08:53,940
variable and we don't have to pass it

159

00:08:53,940  -->  00:09:04,020
into anything, and self.url. So, in look up

160

00:09:04,020  -->  00:09:05,940
what we're going to be doing is we are

161

00:09:05,940  -->  00:09:08,610
going to be getting the URL, so we're

162

00:09:08,610  -->  00:09:11,610
going to say self.driver.get, and

163

00:09:11,610  -->  00:09:17,400
we're going to pass in self.url. Now

164

00:09:17,400  -->  00:09:19,710
what we need to do, and I will show you

165

00:09:19,710  -->  00:09:24,360
guys why, basically,

166

00:09:24,360  -->  00:09:26,610
when you open

167

00:09:26,610  -->  00:09:33,510
up google.com and you do a search this

168

00:09:33,510  -->  00:09:36,210
is the URL we're going to be using. So, if

169

00:09:36,210  -->  00:09:37,770
you know anything about get variables

170

00:09:37,770  -->  00:09:40,020
you know that here q is set to whatever

171

00:09:40,020  -->  00:09:42,510
we type in. So we can remove this, right,

172

00:09:42,510  -->  00:09:45,870
and it doesn't go anywhere, but if we add

173

00:09:45,870  -->  00:09:50,970
it back and make equal to how to make

174

00:09:50,970  -->  00:09:55,680
pie, we see that what we have here is

175

00:09:55,680  -->  00:09:58,530
exactly what we're looking for. So this

176

00:09:58,530  -->  00:10:07,410
should be the answer. If we ask

177

00:10:07,410  -->  00:10:10,080
our program how can I make pie, our

178

00:10:10,080  -->  00:10:14,370
program should say this, this, this, and then

179

00:10:14,370  -->  00:10:15,900
maybe print out the link to where it found

180

00:10:15,900  -->  00:10:20,940
it so we can look there. So that's what,

181

00:10:20,940  -->  00:10:22,830
and I mean you could extend this by

182

00:10:22,830  -->  00:10:25,560
actually following, this adding some

183

00:10:25,560  -->  00:10:29,760
logic, and you know trying to find the

184

00:10:29,760  -->  00:10:32,700
exact directions and your program could

185

00:10:32,700  -->  00:10:34,740
return that, that would be ideal.

186

00:10:34,740  -->  00:10:38,190
Now this div I have already taken the

187

00:10:38,190  -->  00:10:40,890
effort on another machine to have

188

00:10:40,890  -->  00:10:42,810
Phantom.js look at it and print out the

189

00:10:42,810  -->  00:10:45,570
results, and the result is basically that

190

00:10:45,570  -->  00:10:47,520
what we want to target here, this box

191

00:10:47,520  -->  00:10:49,890
that has the instructions in it, has a

192

00:10:49,890  -->  00:10:54,600
class of GSFI. So that's what we're

193

00:10:54,600  -->  00:11:00,779
looking for. Sorry, actually, this

194

00:11:00,779  -->  00:11:03,510
has a class of GSFI. So we're just going to

195

00:11:03,510  -->  00:11:05,670
wait for this to appear I believe, and

196

00:11:05,670  -->  00:11:09,480
then this right here, the actual content

197

00:11:09,480  -->  00:11:11,339
that we have, has a class of underscore

198

00:11:11,339  -->  00:11:13,980
SPG, and i will show you guys exactly

199

00:11:13,980  -->  00:11:17,430
what all this means in just a moment. So what

200

00:11:17,430  -->  00:11:19,020
we're going to do is we're going to try,

201

00:11:19,020  -->  00:11:24,480
we're going to say ip equals, and this is

202

00:11:24,480  -->  00:11:26,580
a variable we're never going to use, going to say

203

00:11:26,580  -->  00:11:34,020
driver.wait.until, self.driver actually

204

00:11:34,020  -->  00:11:37,140
sorry about that, this is an instance

205

00:11:37,140  -->  00:11:40,260
variable. Self.driver.wait.until

206

00:11:40,260  -->  00:11:44,250
expected conditions which we've said is

207

00:11:44,250  -->  00:11:56,160
EC, presence_of_element_located then we

208

00:11:56,160  -->  00:12:00,600
open up brackets here, and then we put in

209

00:12:00,600  -->  00:12:04,290
brackets here it's tuple, By, this is the

210

00:12:04,290  -->  00:12:06,690
other thing that we imported up there,

211

00:12:06,690  -->  00:12:12,060
CLASS_NAME, and this is in all caps. And

212

00:12:12,060  -->  00:12:13,500
where this is a tuple you need to add a

213

00:12:13,500  -->  00:12:15,839
comma and then the class name of

214

00:12:15,839  -->  00:12:17,520
whatever element we're looking for which

215

00:12:17,520  -->  00:12:23,360
is gsfi. There we go.

216

00:12:26,290  -->  00:12:40,899
except: print("Failed bro"), there we go. So

217

00:12:40,899  -->  00:12:42,610
what we're going to do at this point if

218

00:12:42,610  -->  00:12:50,259
we have the page and it

219

00:12:50,259  -->  00:12:56,440
didn't fail right there, basically

220

00:12:56,440  -->  00:12:58,569
we can just get, we can create our

221

00:12:58,569  -->  00:13:01,540
beautiful soup from this, and then you

222

00:13:01,540  -->  00:13:06,430
know continue, I guess. Alright, so, what

223

00:13:06,430  -->  00:13:08,769
we got to do is actually I forgot to do

224

00:13:08,769  -->  00:13:18,880
something...no, I did it. Alright, we need to get the

225

00:13:18,880  -->  00:13:23,170
response here which is self.driver.get.

226

00:13:23,170  -->  00:13:26,290
We should be able to access self.

227

00:13:26,290  -->  00:13:31,600
driver.page_source, and now this is

228

00:13:31,600  -->  00:13:33,130
going to be the web page that is

229

00:13:33,130  -->  00:13:35,350
returned to us. So what I want to do is I

230

00:13:35,350  -->  00:13:37,209
want to create my beautiful soup from

231

00:13:37,209  -->  00:13:40,060
that, so I'm going to say soup equals Beautiful

232

00:13:40,060  -->  00:13:45,279
Soup, the first parameter is self.driver.

233

00:13:45,279  -->  00:13:47,680
page_source, and then the second one is

234

00:13:47,680  -->  00:13:51,069
html.parser and this is a string. There

235

00:13:51,069  -->  00:13:53,649
we go, we've created our soup. Now what

236

00:13:53,649  -->  00:13:54,819
we're going to do is just print out our

237

00:13:54,819  -->  00:13:59,860
soup. So I'm going to save this and then

238

00:13:59,860  -->  00:14:03,730
what we have to do is call lookup here,

239

00:14:03,730  -->  00:14:09,610
so lookup, sorry self.lookup,

240

00:14:09,610  -->  00:14:14,740
there we go. So, what I'm going to do is

241

00:14:14,740  -->  00:14:19,839
in my commands here, one sec...is it?

242

00:14:19,839  -->  00:14:25,149
Yes, okay, in my commands script what I'm

243

00:14:25,149  -->  00:14:28,630
going to do is I'm going to say from

244

00:14:28,630  -->  00:14:34,540
get_answer import Fetcher. Now,

245

00:14:36,550  -->  00:14:39,160
we're going to continue this in the next

246

00:14:39,160  -->  00:14:40,660
video because I think this video is

247

00:14:40,660  -->  00:14:42,550
already pretty long, but basically what

248

00:14:42,550  -->  00:14:45,550
we've done is we've written a scraper

249

00:14:45,550  -->  00:14:48,550
that just prints out the entire source,

250

00:14:48,550  -->  00:14:50,410
and basically what's going to happen

251

00:14:50,410  -->  00:14:52,180
right now is nothing if we were to run

252

00:14:52,180  -->  00:14:53,500
it and that's because we haven't

253

00:14:53,500  -->  00:14:56,910
connected it to our commander.
