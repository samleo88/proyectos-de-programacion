1

00:00:00,000  -->  00:00:02,700
Alright guys, welcome back. So what you're

2

00:00:02,700  -->  00:00:04,350
looking at right here this is basically

3

00:00:04,350  -->  00:00:06,930
the work-in-progress browser that I had

4

00:00:06,930  -->  00:00:09,300
built in Python, and essentially what

5

00:00:09,300  -->  00:00:11,940
we're aiming to do here in this course is

6

00:00:11,940  -->  00:00:13,799
alot of the functionality of this browser

7

00:00:13,799  -->  00:00:15,509
has been completed, and what actually

8

00:00:15,509  -->  00:00:19,770
happened was I realized that

9

00:00:19,770  -->  00:00:23,820
building a web browser in Python is not

10

00:00:23,820  -->  00:00:26,070
necessarily the best idea just because

11

00:00:26,070  -->  00:00:30,539
it's really difficult to deploy, because

12

00:00:30,539  -->  00:00:33,059
it's Python. So, what I've done is

13

00:00:33,059  -->  00:00:36,690
actually started rebuilding this in C++ and

14

00:00:36,690  -->  00:00:38,219
it's called the Eden Browser. If you

15

00:00:38,219  -->  00:00:42,629
guys want to see it, or see the

16

00:00:42,629  -->  00:00:45,930
material design browser in Python, I

17

00:00:45,930  -->  00:00:48,239
mean all that is here, you can go into

18

00:00:48,239  -->  00:00:50,039
source and you can look at the entire

19

00:00:50,039  -->  00:00:53,910
browser's code which is pretty neat. And

20

00:00:53,910  -->  00:00:58,260
you can custom style Qt

21

00:00:58,260  -->  00:00:59,550
applications, and that's what we're going

22

00:00:59,550  -->  00:01:01,079
to be covering I think in the next video,

23

00:01:01,079  -->  00:01:04,949
and this is a draggable custom window

24

00:01:04,949  -->  00:01:07,439
border, and these buttons are all custom, and

25

00:01:07,439  -->  00:01:08,700
I'm going to show you guys how to do

26

00:01:08,700  -->  00:01:09,990
most of this and we're not going to

27

00:01:09,990  -->  00:01:12,180
focus on importing dev tools, but you

28

00:01:12,180  -->  00:01:15,000
guys can check out the source code that

29

00:01:15,000  -->  00:01:18,810
I have on the GitHub account. And then

30

00:01:18,810  -->  00:01:23,580
also if if you want to see the new C++

31

00:01:23,580  -->  00:01:25,439
version it's called Eden Browser, it's

32

00:01:25,439  -->  00:01:28,680
right here, and if you guys want to learn,

33

00:01:28,680  -->  00:01:31,979
if you like Qt so far, and you want to

34

00:01:31,979  -->  00:01:34,500
learn it and be able to deploy apps easily,

35

00:01:34,500  -->  00:01:37,110
and you're thinking about learning C++, I

36

00:01:37,110  -->  00:01:39,540
might be putting together that course in

37

00:01:39,540  -->  00:01:43,380
the near future as well. So, if I do

38

00:01:43,380  -->  00:01:46,259
I'll set a notice in this course

39

00:01:46,259  -->  00:01:47,610
just in case you guys want to check it

40

00:01:47,610  -->  00:01:48,060
out.

41

00:01:48,060  -->  00:01:51,479
So, what we're doing for this video is we

42

00:01:51,479  -->  00:01:54,000
are going to, if I start the app here,

43

00:01:54,000  -->  00:01:57,659
where we left it off this updates, the tabs

44

00:01:57,659  -->  00:02:04,079
update correctly, but the address bar doesn't.

45

00:02:04,079  -->  00:02:09,390
So there's a signal in the web view

46

00:02:09,390  -->  00:02:11,610
the same as title changed or icon

47

00:02:11,610  -->  00:02:14,400
changed, it's just called URL changed, and so what

48

00:02:14,400  -->  00:02:16,650
we're going to do where our add tab method is

49

00:02:16,650  -->  00:02:18,660
here we're going to basically

50

00:02:18,660  -->  00:02:21,720
copy this line except we're going to set

51

00:02:21,720  -->  00:02:26,129
the URL in the address bar, instead of

52

00:02:26,129  -->  00:02:28,140
the icon or title. So, let's go ahead and

53

00:02:28,140  -->  00:02:31,860
type self.tabs, and this right here

54

00:02:31,860  -->  00:02:34,980
is the main QWidget which has the

55

00:02:34,980  -->  00:02:37,440
web browser in it, or the web view.

56

00:02:37,440  -->  00:02:40,769
Content is the web view itself and so the

57

00:02:40,769  -->  00:02:43,170
web view, the web engine view right here, is

58

00:02:43,170  -->  00:02:46,260
what emits the signal URL changed.

59

00:02:46,260  -->  00:02:50,459
So, then I'm going to connect that, we're

60

00:02:50,459  -->  00:02:53,160
using lambda so that we can also send

61

00:02:53,160  -->  00:02:55,650
through parameters, again, we're gonna say

62

00:02:55,650  -->  00:02:59,610
SetTabContent, and we're going to send

63

00:02:59,610  -->  00:03:01,830
the index number, and then we're going

64

00:03:01,830  -->  00:03:08,250
to send URL as the type. Now in the set tab

65

00:03:08,250  -->  00:03:09,720
content what we're going to do right

66

00:03:09,720  -->  00:03:12,569
here at the top, we're going to basically

67

00:03:12,569  -->  00:03:17,550
just...we're going to check if the

68

00:03:17,550  -->  00:03:22,830
active tab matches this tab. So, let's

69

00:03:22,830  -->  00:03:26,879
get the active tabs working name, I guess

70

00:03:26,879  -->  00:03:32,040
we'll call it, so current_tab equals

71

00:03:32,040  -->  00:03:39,060
self.tabbar.tabData, and we're

72

00:03:39,060  -->  00:03:45,810
gonna say self.tabbar.current

73

00:03:45,810  -->  00:03:50,430
Index. Then we need to target the

74

00:03:50,430  -->  00:03:52,650
object and that's going to give us the name. So,

75

00:03:52,650  -->  00:03:55,080
we can basically say if

76

00:03:55,080  -->  00:04:04,020
current_tab equals tab_name and

77

00:04:04,020  -->  00:04:09,750
type equals, what was it, "url": So

78

00:04:09,750  -->  00:04:11,910
that's our condition here. So if the

79

00:04:11,910  -->  00:04:14,610
current tab is equal to the active tab

80

00:04:14,610  -->  00:04:16,500
then we know that we're on that tab, so

81

00:04:16,500  -->  00:04:18,209
the address bar should be related to

82

00:04:18,209  -->  00:04:20,370
that tab, and it should update when that tabs

83

00:04:20,370  -->  00:04:23,520
content changes. So, we're gonna go ahead

84

00:04:23,520  -->  00:04:26,100
and set the address bar, so let's go

85

00:04:26,100  -->  00:04:29,730
ahead and get the URL of the tab. So, self.

86

00:04:29,730  -->  00:04:37,440
tabs[i].content.url, or do I

87

00:04:37,440  -->  00:04:38,310
need to get it?

88

00:04:38,310  -->  00:04:41,040
I need to find the

89

00:04:41,040  -->  00:04:51,930
child, so self.findChild. It's going

90

00:04:51,930  -->  00:04:55,620
to be a QWidget with the name tab_name,

91

00:04:55,620  -->  00:04:59,190
and then we're going to access content.

92

00:04:59,190  -->  00:05:02,790
url, and this is going to return a

93

00:05:02,790  -->  00:05:05,880
QUrl which we need to convert toSting.

94

00:05:05,880  -->  00:05:17,160
So, this is the new url, and then

95

00:05:17,160  -->  00:05:21,270
we're going to say self.addressbar, lower

96

00:05:21,270  -->  00:05:25,680
case, setText, and the text is going to

97

00:05:25,680  -->  00:05:30,240
be new_url. We're going to save this, and

98

00:05:30,240  -->  00:05:32,010
now it's still going to run this.

99

00:05:32,010  -->  00:05:34,980
So what we need to do is put thatn in an else

100

00:05:34,980  -->  00:05:37,080
statement, or we could just return false

101

00:05:37,080  -->  00:05:42,330
here. And if we return it's not going to

102

00:05:42,330  -->  00:05:45,150
do anything else. Let's go ahead and

103

00:05:45,150  -->  00:05:50,280
restart the application, and now you'll

104

00:05:50,280  -->  00:05:52,710
see that it updated in that tab. So when

105

00:05:52,710  -->  00:05:54,690
I open this tab, oh

106

00:05:54,690  -->  00:05:56,640
we're going to go over QShortcuts

107

00:05:56,640  -->  00:06:02,190
soon too. So, facebook.com we'll see that that's updated

108

00:06:02,190  -->  00:06:05,340
here, and when I switch tabs it's still

109

00:06:05,340  -->  00:06:07,740
updated. So what we need to do is we need

110

00:06:07,740  -->  00:06:09,900
to hook into the switch tab method and

111

00:06:09,900  -->  00:06:11,850
we need to update the URL every time we

112

00:06:11,850  -->  00:06:14,580
switch tabs as well. So, here's the switch

113

00:06:14,580  -->  00:06:16,140
tab method, so let's go ahead and get the

114

00:06:16,140  -->  00:06:17,320
URL of the

115

00:06:17,320  -->  00:06:21,610
tabs content. So new_url equals

116

00:06:21,610  -->  00:06:29,860
tab_content.url.toString, and

117

00:06:29,860  -->  00:06:32,380
again the tab content itself we're

118

00:06:32,380  -->  00:06:33,730
actually going to need to access content

119

00:06:33,730  -->  00:06:36,250
within tab content. So this should

120

00:06:36,250  -->  00:06:38,830
really be called tab widget, because this

121

00:06:38,830  -->  00:06:40,990
right here that's highlighted that is a

122

00:06:40,990  -->  00:06:45,490
QWidget, it's not the content. So, let's go

123

00:06:45,490  -->  00:06:48,430
ahead and this is now going to focus in

124

00:06:48,430  -->  00:06:51,010
on the web engine view, it's going to get the url,

125

00:06:51,010  -->  00:06:52,270
it's going to convert it to a string so that

126

00:06:52,270  -->  00:06:55,330
we can do stuff with it. So, now let's go

127

00:06:55,330  -->  00:06:57,820
ahead and change the address bar. So

128

00:06:57,820  -->  00:07:01,480
self.addressbar.setText

129

00:07:01,480  -->  00:07:05,860
is equal to new_url. Go ahead and save this,

130

00:07:05,860  -->  00:07:11,530
and then the application, and I'm going

131

00:07:11,530  -->  00:07:16,270
to switch the tab here to facebook.com. Now

132

00:07:16,270  -->  00:07:19,060
Facebook here has it's URL but when I

133

00:07:19,060  -->  00:07:21,070
switch to Google you'll see that it updated

134

00:07:21,070  -->  00:07:23,020
correctly, and it doesn't matter how I

135

00:07:23,020  -->  00:07:26,380
drag these because we resolved all

136

00:07:26,380  -->  00:07:29,110
that dynamic numbering of the tabs, we

137

00:07:29,110  -->  00:07:30,670
solved that problem in one of the

138

00:07:30,670  -->  00:07:32,800
previous videos. So that is how you do

139

00:07:32,800  -->  00:07:34,240
that. Now it's starting to look like a

140

00:07:34,240  -->  00:07:35,920
more complete browser.

141

00:07:35,920  -->  00:07:38,500
We've got back and forward functionality,

142

00:07:38,500  -->  00:07:44,140
we've got refresh functionality, do we? I

143

00:07:44,140  -->  00:07:47,560
think we did do that, one sec...that would be down

144

00:07:47,560  -->  00:07:50,020
here.

145

00:07:50,020  -->  00:07:53,170
Yep, ok. So it did reload,

146

00:07:53,170  -->  00:07:56,230
it's just nothing changed so nothing

147

00:07:56,230  -->  00:08:00,940
updated. We've got a tab button. So, 'NoneType'

148

00:08:00,940  -->  00:08:01,660
object is not subscriptable...

149

00:08:01,660  -->  00:08:03,670
Ok, so, what this basically is

150

00:08:03,670  -->  00:08:08,890
doing right here when we click the tab

151

00:08:08,890  -->  00:08:13,690
bar, if we click it in a place where there's

152

00:08:13,690  -->  00:08:16,510
not a tab, none of our methods can run. So,

153

00:08:16,510  -->  00:08:19,240
when we, what is it?

154

00:08:19,240  -->  00:08:23,650
I guess I would just call self add tab.

155

00:08:23,650  -->  00:08:26,110
So what I'm going to do is I'm going to say,

156

00:08:26,110  -->  00:08:29,440
not add tab it would be

157

00:08:29,440  -->  00:08:31,630
switch tab, that triggers switch. So

158

00:08:31,630  -->  00:08:34,300
what I'm going to do is I'm going to say if

159

00:08:34,300  -->  00:08:39,720
self.tabbar.

160

00:08:46,440  -->  00:08:49,070
...

161

00:08:49,630  -->  00:08:53,100
tabData.

162

00:08:56,279  -->  00:08:59,370
So this is going to make it basically if

163

00:08:59,370  -->  00:09:00,870
there's tab data then we know that we've

164

00:09:00,870  -->  00:09:03,240
clicked on a tab, so we should run this.

165

00:09:03,240  -->  00:09:05,310
Otherwise, it shouldn't run, and it

166

00:09:05,310  -->  00:09:06,990
shouldn't crash, and as you can see it's

167

00:09:06,990  -->  00:09:09,420
not, but our switching tabs should still

168

00:09:09,420  -->  00:09:18,149
work, and it does, but now when we click

169

00:09:18,149  -->  00:09:20,220
on the tab bar that's not on a tab we don't

170

00:09:20,220  -->  00:09:23,069
get that error. So, now we've got a

171

00:09:23,069  -->  00:09:24,180
working address bar too. What we're

172

00:09:24,180  -->  00:09:25,740
going to be doing in the next video I

173

00:09:25,740  -->  00:09:26,910
think we're going to be talking about

174

00:09:26,910  -->  00:09:29,550
styling things, so we can get that done,

175

00:09:29,550  -->  00:09:32,459
and then we'll talk about shortcuts and

176

00:09:32,459  -->  00:09:35,809
stuff like that.
