1

00:00:00,000  -->  00:00:05,400
Alright guys, welcome back. So to continue along with PyMongo there's one very

2

00:00:05,400  -->  00:00:09,630
important thing that we need to talk
about and that's scalability. Now if you don't

3

00:00:09,630  -->  00:00:15,570
know what scalability is it's basically
like when you start an app. When you first

4

00:00:15,570  -->  00:00:21,090
release an app you might have like 10 or 20 users, and so your database only contains

5

00:00:21,090  -->  00:00:26,820
the content of those 10 or 20 users, but
as time goes on you know your goal

6

00:00:26,820  -->  00:00:33,390
should be to increase your user base and
so you're going to need to scale up to

7

00:00:33,390  -->  00:00:39,300
accommodate more users. Now, this you need to kind of focus on every part of your

8

00:00:39,300  -->  00:00:44,010
app from the network side of it, to the
programming, and the database

9

00:00:44,010  -->  00:00:49,950
management in order to get a good
scalability factor in your app. Now, we're

10

00:00:49,950  -->  00:00:57,180
not going to be discussing ways to scale
your app you know via network controls

11

00:00:57,180  -->  00:01:01,350
and stuff that you can do in terms of load
balancers and whatnot, but that is

12

00:01:01,350  -->  00:01:07,290
something you should definitely look
into. In terms of PyMongo this indexing

13

00:01:07,290  -->  00:01:12,180
is what makes a big difference. So to
explain this let me bring up RoboMongo

14

00:01:12,180  -->  00:01:17,790
here so as you'll see I have
9 documents and there's at least

15

00:01:17,790  -->  00:01:25,259
three fields in each one and some of them
have more, and so when I run a command

16

00:01:25,259  -->  00:01:28,979
like find and i'm looking for something
specific,

17

00:01:29,880  -->  00:01:35,400
let's say that I always want to be
able to search just by username. So if I

18

00:01:35,400  -->  00:01:42,899
were to find based on user name like
this, and we're not going to see a huge

19

00:01:42,899  -->  00:01:50,610
drastic improvement in the speed of this
because it's still pretty small. So let's

20

00:01:50,610  -->  00:01:58,530
say I'm looking for a "users.find({"username": "nick"})" What this has to do in order to

21

00:01:58,530  -->  00:02:03,810
find objects as it starts from position
one and then it scans the entire

22

00:02:03,810  -->  00:02:06,540
document that looks for that field and

23

00:02:06,540  -->  00:02:10,470
that value. So it will check this field,
and then this one, then it will drop down

24

00:02:10,470  -->  00:02:11,760
here and check that,

25

00:02:11,760  -->  00:02:17,010
that, and that,  and then, and then that. And then it will move on to the next document. Now as

26

00:02:17,010  -->  00:02:20,459
you can see this isn't really efficient,
and if we knew that our

27

00:02:20,459  -->  00:02:27,870
application searched for users based on
the ID or the username, an ID is an

28

00:02:27,870  -->  00:02:31,920
automatic index in Mongo, so what that
means is you don't need to create

29

00:02:31,920  -->  00:02:38,489
an index. What an index does when you
create them it indexes a certain list of

30

00:02:38,489  -->  00:02:44,970
documents based on certain columns or
fields, so in this instance we would want

31

00:02:44,970  -->  00:02:48,810
to create an index for the field
username, and this would compile a

32

00:02:48,810  -->  00:02:54,239
separate list which would be it would
only contain usernames and then point to the

33

00:02:54,239  -->  00:02:59,730
entire document, and as you can guess
traversing all that data to find a

34

00:02:59,730  -->  00:03:03,000
specific user name is going to make a
lot more sense and it's going to be a

35

00:03:03,000  -->  00:03:09,329
lot faster. An then also, we could flip the
resulting index list alphabetically,

36

00:03:09,329  -->  00:03:15,720
etc. and I mean if you wanted to
store by date created if that's a common

37

00:03:15,720  -->  00:03:19,769
search functionality that you're going
to be using within your app is to search

38

00:03:19,769  -->  00:03:24,780
users based on when they were created
you can index the date and then you know

39

00:03:24,780  -->  00:03:29,639
ascend or descend that. So we're gonna
be creating an index for username here

40

00:03:29,639  -->  00:03:34,859
and again we're not going to see a big
difference in the speed, but you will

41

00:03:34,859  -->  00:03:40,230
when you start getting bigger databases.
So, how to create the index is really

42

00:03:40,230  -->  00:03:40,799
simple.

43

00:03:40,799  -->  00:03:50,730
Let's just go ahead and type "db.users.create_index( )" and now what we need to do

44

00:03:50,730  -->  00:03:58,199
is pass it a list, and then also an
object. So let's do this "[( )]" then

45

00:03:58,199  -->  00:04:03,180
we're going to pass in some parameters.
So in this instance the first thing that

46

00:04:03,180  -->  00:04:09,239
we're going to be doing is we're
targeting the column username, so that's

47

00:04:09,239  -->  00:04:16,049
what you're going to put in here "username" and actually you can see right here in

48

00:04:16,049  -->  00:04:21,060
the background to that it's going
to have more information as well. We're

49

00:04:21,060  -->  00:04:22,310
going to sort ascending

50

00:04:22,310  -->  00:04:30,290
for now, so how you do that is just type
", pymongo.ASCEDNING" then after this you

51

00:04:30,290  -->  00:04:35,060
can, you can do a lot more stuff with
this including making it more unique, so

52

00:04:35,060  -->  00:04:38,630
for the usernames that's going to make
sense because if we try to insert a

53

00:04:38,630  -->  00:04:42,919
document that has a duplicate username
we can just return an error rather than

54

00:04:42,919  -->  00:04:48,770
having to write more logic to count you
know if any user names already exist. So

55

00:04:48,770  -->  00:05:04,430
let's type "unique=True" and I got a error
there and that's because I put that in

56

00:05:04,430  -->  00:05:07,820
the wrong spot, so that goes around there,

57

00:05:08,360  -->  00:05:13,220
the square bracket it just wraps around this right here

58

00:05:13,220  -->  00:05:17,810
which is comma separated list, and we're going to add this after it. So go

59

00:05:17,810  -->  00:05:26,870
ahead and create. So, it already found
duplicate username, so

60

00:05:28,550  -->  00:05:31,729
let's just go ahead and do that without
unique sets true,

61

00:05:31,729  -->  00:05:38,870
there we go. So we've created an index
here and basically what that means is

62

00:05:38,870  -->  00:05:49,669
when we search by username like this, againg we're not going to see a drastic

63

00:05:49,669  -->  00:05:53,330
improvement here but it is going to
actually do it a lot faster. Once you get

64

00:05:53,330  -->  00:05:58,160
a thousand documents in a collection or
more you're going to start to notice

65

00:05:58,160  -->  00:06:04,880
that it might slow down and this is how
to improve the speed based on that. Now,

66

00:06:04,880  -->  00:06:09,830
that's all we're going to touch on for
now. We make you more PyMongo or we may

67

00:06:09,830  -->  00:06:15,919
move right on to Webpy I and how to you
know either build an API or something

68

00:06:15,919  -->  00:06:16,419
maybe.
