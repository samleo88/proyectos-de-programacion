/**
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Universidad de los Andes (Bogotá - Colombia)
 * Departamento de Ingeniería de Sistemas y Computación 
 * Licenciado bajo el esquema Academic Free License version 2.1 
 *
 * Proyecto Cupi2 (http://cupi2.uniandes.edu.co)
 * Ejercicio: n12_batallaPokemon
 * Autor: Equipo Cupi2 2016
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 */

package uniandes.cupi2.batallaPokemon.cliente.mundo;

import uniandes.cupi2.batallaPokemon.cliente.interfaz.*;

/**
 * Esta clase implementa lo que se debe hacer en un hilo de ejecución cuando se quiere conectar al cliente con el servidor.
 */
public class ThreadConectar extends Thread
{
    // -----------------------------------------------------------------
    // Atributos
    // -----------------------------------------------------------------

    /**
     * Referencia a la batalla.
     */
    private Batalla batalla;

    /**
     * Ventana principal de la aplicación
     */
    private InterfazCupiPokemon principal;

    /**
     * Nombre que utilizará el jugador.
     */
    private String nombre;

    /**
     * Alias que utilizará el jugador.
     */
    private String alias;

    /**
     * Avatar que utilizará el jugador.
     */
    private String avatar;

    /**
     * Dirección para localizar al servidor.
     */
    private String servidor;

    /**
     * Puerto a través del cual se realizará la conexión con el servidor.
     */
    private int puerto;

    // -----------------------------------------------------------------
    // Constructores
    // -----------------------------------------------------------------

    /**
     * Construye el nuevo hilo y lo deja listo para conectarse al servidor.
     * @param pBatalla Batalla actual. pBatalla != null.
     * @param pInterfaz Ventana principal de la aplicación. pInterfaz != null.
     * @param pNombreJugador Nombre que utilizará el jugador. pNombreJugador != null.
     * @param pDireccionServidor Dirección para localizar al servidor. pDireccionServidor != null.
     * @param pPuertoServidor Puerto a través del cual se realizará la conexión con el servidor. pPuertoServidor != null.
     * @param pAlias Alias que utilizará el jugador. pAlias != null.
     * @param pAvatar Avatar que utilizará el jugador. pAvatar != null.
     */
    public ThreadConectar( Batalla pBatalla, InterfazCupiPokemon pInterfaz, String pNombreJugador, String pDireccionServidor, int pPuertoServidor, String pAlias, String pAvatar )
    {
        batalla = pBatalla;
        principal = pInterfaz;
        nombre = pNombreJugador;
        servidor = pDireccionServidor;
        puerto = pPuertoServidor;
        alias = pAlias;
        avatar = pAvatar;
    }

    // -----------------------------------------------------------------
    // Métodos
    // -----------------------------------------------------------------

    /**
     * Inicia la ejecución del hilo que realiza la conexión con el servidor, dispara la selección de los pokémon e incializa la batalla.<br>
     * Cuando se tiene la conexión y la información de la batalla entonces se actualiza la interfaz.
     */
    public void run( )
    {
        try
        {
            batalla.conectar( nombre, servidor, puerto, alias, avatar );
            principal.seleccionarPokemones( );
            batalla.enviarDatosAOponente( );
            batalla.leerPokemonSeleccionado( );
            principal.actualizarInterfaz( );
            principal.actualizarDatosOponente( );

            if( batalla.darEstadoJuego( ) == Batalla.ESPERANDO_OPONENTE )
            {
                principal.esperarJugada( );
            }

        }
        catch( BatallaPokemonException e )
        {
            principal.mostrarError( e );
        }

    }
}
