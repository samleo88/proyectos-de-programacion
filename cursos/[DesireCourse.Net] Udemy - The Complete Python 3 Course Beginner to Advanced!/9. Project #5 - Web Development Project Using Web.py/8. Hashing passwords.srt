1

00:00:00,000  -->  00:00:03,689
Alright guys, welcome back. In the last
video we learned about how to register our

2

00:00:03,689  -->  00:00:06,930
user, but we didn't register our user
properly and that's because we are

3

00:00:06,930  -->  00:00:13,019
storing it in Mongo using an unhashed
password. So basically it's stored as plain

4

00:00:13,019  -->  00:00:17,190
text in the database and that's just bad.
So what we're going to do, we're going to

5

00:00:17,190  -->  00:00:21,300
rework our script a little bit and we're
going to encrypt our password, and then

6

00:00:21,300  -->  00:00:26,820
put the password in in the encrypted
form, and then what we're going to do is

7

00:00:26,820  -->  00:00:31,080
learn how to match passwords and check
if they match. So to do this,

8

00:00:31,650  -->  00:00:41,160
new window, we need to install something so go ahead

9

00:00:41,160  -->  00:00:55,620
and type pip3 install...alright, let me try that again. Type "pip3 install bcrypt"

10

00:00:55,620  -->  00:01:01,260
I already got it installed. It's going to
install a few other packages, once you

11

00:01:01,260  -->  00:01:11,070
get it installed just close the terminal. Now we're going to "import bcrypt" here. Going

12

00:01:11,070  -->  00:01:15,810
to create a variable called "hashed = bcrypt.hashpw

13

00:01:15,810  -->  00:01:25,680
(data.password.encode( ), )"

14

00:01:25,680  -->  00:01:32,820
and then we're going to generate
some salt. So salt is what encrypts,

15

00:01:32,820  -->  00:01:38,640
it's the algorithm that it encrypts
with. So "bcrypt.gensalt" and that's

16

00:01:38,640  -->  00:01:44,729
really all we need to do. So now this
creates a hashed version of the password

17

00:01:44,729  -->  00:01:49,380
and that's the password that we're going
to store in the password field. So what

18

00:01:49,380  -->  00:01:55,470
we're going to do is we're going to
immediately after this we're going to

19

00:01:55,470  -->  00:02:01,259
then also check the password, check
if the password matches a specific

20

00:02:01,259  -->  00:02:05,399
password. We're just going to check it,
and i'll explain things in a moment,

21

00:02:05,399  -->  00:02:08,100
so "if

22

00:02:08,100  -->  00:02:17,640
bcrypt .checkpw( )" and this function is
going to take the first item of

23

00:02:17,640  -->  00:02:24,000
plaintext so we're going to set "avocado1"
and of course we need to ".encode( )" that

24

00:02:24,000  -->  00:02:32,220
first, and then the second parameter is
going to be the existing hashed password.

25

00:02:32,220  -->  00:02:41,610
So what I'm going to do is I'm going to
get the user here, so "myuser =

26

00:02:41,610  -->  00:02:50,760
self.Users.find_one( )" and it's going to
be based on the the ID. So find one where

27

00:02:50,760  -->  00:03:05,820
the ID is equal to...actually let's just
search by username. "{"username":

28

00:03:05,820  -->  00:03:12,210
data.username}" and what
we're going to do is we're going to use

29

00:03:12,210  -->  00:03:23,640
that second password through "myuser["password]" So, if bcrypt the check

30

00:03:23,640  -->  00:03:28,410
password method, and we're passing in two items here, the first one is the password

31

00:03:28,410  -->  00:03:32,130
we want to see if it matches the
existing one, and the second one is going

32

00:03:32,130  -->  00:03:37,680
to be the existing password which we are
pulling out of the database. So, if it's

33

00:03:37,680  -->  00:03:44,280
correct we want to "print("this matches")" So let's go ahead and run the controller

34

00:03:44,280  -->  00:03:53,340
here, no socket could be created, address
is already in use.

35

00:03:54,120  -->  00:04:01,080
Oh, I'm already running it here, let me end
that one, there we go. Start this, refresh

36

00:04:01,080  -->  00:04:04,350
this, do I have anything in Mongo? No, I do not.

37

00:04:04,350  -->  00:04:07,350
Alright, we're going to create a user

38

00:04:10,600  -->  00:04:17,440
and my password is going to be the same
one that I used over here,

39

00:04:17,440  -->  00:04:21,670
avocado1. So i'm going to copy and
paste it just to make sure I put it in

40

00:04:21,670  -->  00:04:26,440
correctly and we get the desired output.
So hit submit, it's going to say nick1 here, but

41

00:04:26,440  -->  00:04:31,300
if we come back over here you're going
to see that it matches, and this

42

00:04:31,300  -->  00:04:36,400
basically means that this is the
type of a check we're going to do when a

43

00:04:36,400  -->  00:04:37,570
user logs in.

44

00:04:37,570  -->  00:04:43,630
We're going to get the username objects
or the users object based on the

45

00:04:43,630  -->  00:04:48,400
username they put in or email, and we're
going to hash the password they put in

46

00:04:48,400  -->  00:04:55,450
and check it against the existing hashed
password. And if we open up Mongo and

47

00:04:55,450  -->  00:05:00,550
refresh you're going to see this time
we've got a binary password in here, and

48

00:05:00,550  -->  00:05:05,260
if we go ahead and edit the document,
this if someone ever did get into your

49

00:05:05,260  -->  00:05:11,170
database and they saw this they
wouldn't know what it means, and so

50

00:05:11,170  -->  00:05:12,490
that's why

51

00:05:12,490  -->  00:05:19,180
it's a lot more secure than storing plain text in the database.

52

00:05:19,180  -->  00:05:22,840
So in the next video we're actually
going to create that login script, and

53

00:05:22,840  -->  00:05:25,360
use a similar function to this right
here.
