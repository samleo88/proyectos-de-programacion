/**
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Universidad de los Andes (Bogotá - Colombia)
 * Departamento de Ingeniería de Sistemas y Computación 
 * Licenciado bajo el esquema Academic Free License version 2.1 
 *
 * Proyecto Cupi2 (http://cupi2.uniandes.edu.co)
 * Ejercicio: n12_batallaPokemon
 * Autor: Equipo Cupi2 2016
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 */

package uniandes.cupi2.batallaNaval.testCliente;

import java.awt.Color;
import java.util.ArrayList;

import junit.framework.TestCase;
import uniandes.cupi2.batallaPokemon.cliente.mundo.*;

/**
 * Clase que verifica los métodos de la clase Jugador.
 */
public class JugadorTest extends TestCase
{
    // -----------------------------------------------------------------
    // Atributos
    // -----------------------------------------------------------------

    /**
     * Jugador donde se harán las pruebas.
     */
    private Jugador jugador;

    // -----------------------------------------------------------------
    // Métodos
    // -----------------------------------------------------------------

    /**
     * Escenario 1: Construye un jugador.
     */
    private void setupEscenario1( )
    {
        jugador = new Jugador( );
    }

    /**
     * Escenario 2: Construye un jugador.
     */
    private void setupEscenario2( )
    {

        ArrayList pokemonSeleccionados = new ArrayList( );
        pokemonSeleccionados.add( 0 );
        pokemonSeleccionados.add( 1 );
        pokemonSeleccionados.add( 2 );

        Pokemon[] pokemonesExistentes = new Pokemon[3];
        pokemonesExistentes[ 0 ] = new Pokemon( Pokemon.TIPO_AGUA, "Wartortle", "imagenWartortle" );
        pokemonesExistentes[ 1 ] = new Pokemon( Pokemon.TIPO_FUEGO, "Charizard", "imagenCharizard" );
        pokemonesExistentes[ 2 ] = new Pokemon( Pokemon.TIPO_ELECTRICO, "Raichu", "imagenRaichu" );

        jugador = new Jugador( );
        jugador.modificarAlias( "Pika" );
        jugador.modificarNombreJugador( "Pikachú" );
        jugador.modificarImagenAvatarJugador( "imagePika" );
        jugador.ingresarPokemones( pokemonSeleccionados, pokemonesExistentes );
    }

    /**
     * Prueba 1: Verifica el constructor de la clase Jugador. <br>
     * <b> Métodos a probar: </b> <br>
     * Jugador <br>
     * darAlias <br>
     * darNombreJugador <br>
     * darImagenAvatar <br>
     * darPokemonesJugador <br>
     * <b> Casos de prueba: </b> <br>
     * 1. Al crear un Jugador y pedir su información, esta debe ser retornada de forma correcta.
     */
    public void testJugador( )
    {
        setupEscenario2( );

        assertEquals( "El alias del jugador no corresponde.", "Pika", jugador.darAlias( ) );
        assertEquals( "El nombre del jugador no corresponde.", "Pikachú", jugador.darNombreJugador( ) );
        assertEquals( "La imagen avatar del jugador no corresponde.", "imagePika", jugador.darImagenAvatar( ) );
        assertEquals( "Los pokémon del jugador no corresponden", 3, jugador.darPokemonesJugador( ).size( ) );

    }

    /**
     * Prueba 2: Verifica el método ingresarPokemones. <br>
     * <b> Métodos a probar: </b> <br>
     * ingresarPokemones <br>
     * <b> Casos de prueba: </b> <br>
     * 1. El jugador debe tener 3 pokémon.
     */
    public void testIngresarPokemones( )
    {
        setupEscenario1( );
        ArrayList pokemonSeleccionados = new ArrayList( );
        pokemonSeleccionados.add( 0 );
        pokemonSeleccionados.add( 1 );
        pokemonSeleccionados.add( 2 );

        Pokemon[] pokemonesExistentes = new Pokemon[3];
        pokemonesExistentes[ 0 ] = new Pokemon( Pokemon.TIPO_AGUA, "Wartortle", "imagenWartortle" );
        pokemonesExistentes[ 1 ] = new Pokemon( Pokemon.TIPO_FUEGO, "Charizard", "imagenCharizard" );
        pokemonesExistentes[ 2 ] = new Pokemon( Pokemon.TIPO_ELECTRICO, "Raichu", "imagenRaichu" );

        jugador = new Jugador( );
        jugador.modificarAlias( "Pika" );
        jugador.modificarNombreJugador( "Pikachú" );
        jugador.modificarImagenAvatarJugador( "imagePika" );
        jugador.ingresarPokemones( pokemonSeleccionados, pokemonesExistentes );
        assertEquals( "El número de pokémon del jugador no corresponde.", 3, jugador.darPokemonesJugador( ).size( ) );
    }

    /**
     * Prueba 3: Verifica el método darCantidadPokemonesDebilitados. <br>
     * <b> Métodos a probar: </b> <br>
     * darCantidadPokemonesDebilitados <br>
     * <b> Casos de prueba: </b> <br>
     * 1.El jugador no tiene un pokémon debilitado.<br>
     * 2.El jugador tiene un pokémon debilitado.
     */
    public void testDarCantidadPokemonesDebilitados( )
    {
        setupEscenario2( );

        Pokemon pokemon1 = ( Pokemon )jugador.darPokemonesJugador( ).get( 0 );
        // 1
        assertEquals( "El pokémon no debería estar debilitado.", 0, jugador.darCantidadPokemonesDebilitados( ) );

        // 2
        Pokemon pokemon2 = ( Pokemon )jugador.darPokemonesJugador( ).get( 1 );
        pokemon2.modificarSalud( 30 );

        assertEquals( "Un pokémon debería estar debilitado.", 1, jugador.darCantidadPokemonesDebilitados( ) );

    }

}
