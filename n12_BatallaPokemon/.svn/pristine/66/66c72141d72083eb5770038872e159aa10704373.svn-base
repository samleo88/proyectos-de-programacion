/**
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Universidad de los Andes (Bogotá - Colombia)
 * Departamento de Ingeniería de Sistemas y Computación 
 * Licenciado bajo el esquema Academic Free License version 2.1 
 *
 * Proyecto Cupi2 (http://cupi2.uniandes.edu.co)
 * Ejercicio: n12_batallaPokemon
 * Autor: Equipo Cupi2 2016
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 */

package uniandes.cupi2.batallaPokemon.cliente.interfaz;

import java.awt.BorderLayout;
import java.awt.Checkbox;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.border.TitledBorder;

import uniandes.cupi2.batallaPokemon.cliente.mundo.Pokemon;

/**
 * Diálogo para seleccionar los pokémon del jugador.
 */
public class DialogoSeleccionarPokemones extends JDialog implements ActionListener, ItemListener
{
    // -----------------------------------------------------------------
    // Constantes
    // -----------------------------------------------------------------

    /**
     * Constante de serialización.
     */
    private static final long serialVersionUID = -4436546417032269683L;

    /**
     * Representa el comando Aceptar.
     */
    private final static String ACEPTAR = "Aceptar";

    // -----------------------------------------------------------------
    // Atributos
    // -----------------------------------------------------------------

    /**
     * Ventana principal de la aplicación.
     */
    private InterfazBatallaPokemon principal;

    /**
     * Cantidad de pokémon posibles
     */
    private int cantidadPokemon;

    // -----------------------------------------------------------------
    // Atributos de interfaz
    // -----------------------------------------------------------------

    /**
     * Arreglo de checkbox de los pokémon posibles.
     */
    private JCheckBox[] listaChkPokemones;

    /**
     * Botón de aceptar.
     */
    private JButton btnAceptar;
    
    /**
     * Cantidad actual de pokémon seleccionados
     */
    private int cantidadSeleccionados;
    
    /**
     * Lista con los pokémon seleccionados  por  el  usuario.
     */
    private ArrayList pokemonSeleccionados;
    
    /**
     * Arreglo con los posibles pokémon que  puede  seleccionar el usuario.
     */
    private  Pokemon[] listaPokemones;

    // -----------------------------------------------------------------
    // Constructores
    // -----------------------------------------------------------------

    /**
     * Constructor del diálogo.
     * @param pPrincipal Ventana principal de la aplicación.
     * @param pPokemonDisponibles Lista de los pokémon disponibles en el juego
     */
    public DialogoSeleccionarPokemones( InterfazBatallaPokemon pPrincipal, Pokemon[] pPokemonDisponibles )
    {
        principal = pPrincipal;
        listaPokemones = pPokemonDisponibles;
        pokemonSeleccionados = new ArrayList( );
        
        setSize( 700, 500 );
        setModal( true );
        setLocationRelativeTo( principal );
        setTitle( "Seleccionar pokémon" );
        setResizable( false );

        JPanel panelGeneral = new JPanel( );
        panelGeneral.setBorder( new EmptyBorder( 10, 10, 10, 10 ));
        panelGeneral.setLayout( new BorderLayout( ) );

        JLabel label = new JLabel( "Seleccione los 4 pokémon con los que desea jugar:" );
      
        cantidadPokemon = pPokemonDisponibles.length;
        listaChkPokemones = new JCheckBox[cantidadPokemon];

        JPanel panel = new JPanel( );
        panel.setLayout( new GridLayout( cantidadPokemon / 2, 5, 5, 5 ) );
        panel.setBorder( new EmptyBorder( 5, 5, 5, 5 ) );

        for( int i = 0; i < cantidadPokemon; i++ )
        {
            String pokemon = pPokemonDisponibles[ i ].darNombre( );

            // Añade la opción del pokémon Pikachu.
            listaChkPokemones[ i ] = new JCheckBox( pokemon );
            listaChkPokemones[ i ].addItemListener( this );
            panel.add( listaChkPokemones[ i ] );

            JLabel labelPokemon1 = new JLabel( new ImageIcon( "./data/imagenes/" + pokemon + "Miniatura.jpg" ) );
            labelPokemon1.setHorizontalAlignment( JLabel.CENTER );
            labelPokemon1.setPreferredSize( new Dimension( 50, 80 ) );
            labelPokemon1.setVerticalAlignment( JLabel.CENTER );
            panel.add( labelPokemon1 );
            if( i % 2 == 0 )
                panel.add( new JLabel( ) );
        }

        btnAceptar = new JButton( "Aceptar" );
        btnAceptar.setActionCommand( ACEPTAR );
        btnAceptar.addActionListener( this );
        btnAceptar.setEnabled( false );

        panelGeneral.add( label, BorderLayout.NORTH );
        panelGeneral.add( panel, BorderLayout.CENTER );
        panelGeneral.add( btnAceptar, BorderLayout.SOUTH );

        add( panelGeneral );
    }
    
    /**
     * Manejo de los eventos de los checkbox.
     * @param pEventoItem Acción que generó el evento.
     */
    public void itemStateChanged( ItemEvent pEventoItem )
    {
        JCheckBox source = ( JCheckBox )pEventoItem.getSource( );
        String seleccionado = source.getText( );
        if(source.isSelected( ))
        {
            cantidadSeleccionados++;
            pokemonSeleccionados.add( darPokemon( seleccionado ) );
        }
        else
        {
            cantidadSeleccionados--;
            pokemonSeleccionados.remove( darPokemon( seleccionado ) );
        }
        
        for( int i = 0; i < cantidadPokemon; ++i )
        {
            if(  cantidadSeleccionados == 4 )
            {
                if( !listaChkPokemones[ i ].isSelected( ) )
                {
                    listaChkPokemones[ i ].setEnabled( false );
                    btnAceptar.setEnabled( true );
                }
            }
            else
            {
                listaChkPokemones[ i ].setEnabled( true );
                btnAceptar.setEnabled( false );
            }
        }

    }
    
    /**
     * Manejo de los eventos de los botones.
     * @param pEvento Acción que generó el evento.
     */
    public void actionPerformed( ActionEvent pEvento )
    {
        String accion = pEvento.getActionCommand( );
        if( accion.equals( ACEPTAR ) )
        {
            principal.ingresarPokemonesSeleccionados( pokemonSeleccionados );
            this.dispose( );
        }
    }
    
    /**
     * Retorna el pokémon con el nombre dado por parámetro.
     * @param pNombrePokemon Nombre del pokémon buscado. 
     * @return Pokémon con el nombre dado.
     */
    private Pokemon darPokemon( String pNombrePokemon)
    {
        Pokemon buscado =  null;
        for(int i = 0; i < listaPokemones.length && buscado == null; i++)
        {
            Pokemon actual = listaPokemones[i];
            if(actual.darNombre( ).equals( pNombrePokemon ))
            {
                buscado = actual;
            }
        }
        return buscado;
        
    }
}
