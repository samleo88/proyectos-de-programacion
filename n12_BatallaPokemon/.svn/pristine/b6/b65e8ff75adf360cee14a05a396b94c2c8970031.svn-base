/**
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Universidad de los Andes (Bogotá - Colombia)
 * Departamento de Ingeniería de Sistemas y Computación 
 * Licenciado bajo el esquema Academic Free License version 2.1 
 *
 * Proyecto Cupi2 (http://cupi2.uniandes.edu.co)
 * Ejercicio: n12_batallaPokemon
 * Autor: Equipo Cupi2 2016
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 */

package uniandes.cupi2.batallaPokemon.cliente.interfaz;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.LineBorder;

import uniandes.cupi2.batallaPokemon.cliente.mundo.Pokemon;

/**
 * Panel con la información de batalla del jugador.
 */
public class PanelJugador extends JPanel implements ActionListener
{
    // -----------------------------------------------------------------
    // Constantes
    // -----------------------------------------------------------------

    /**
     * Constante con la ruta a las imágenes de las fichas.
     */
    private final static String RUTA = "./data/imagenes/";

    // -----------------------------------------------------------------
    // Atributos
    // -----------------------------------------------------------------

    /**
     * Lista con los pokemónes del jugador.
     */
    private ArrayList pokemones;

    /**
     * Pokemón seleccionado.
     */
    private Pokemon pokemonSeleccionado;

    // -----------------------------------------------------------------
    // Atributos de la Interfaz
    // -----------------------------------------------------------------

    /**
     * Etiqueta con la imagen del jugador.
     */
    private JLabel etiquetaImagenJugador;

    /**
     * Etiqueta con la imagen del pokemón seleccionado actualmente.
     */
    private JLabel etiquetaImagenPokemonSeleccionado;

    /**
     * Panel con los pokemones seleccionados para la batalla.
     */
    private JPanel panelPokemones;

    /**
     * Botón del pokemón a seleccionar.
     */
    private JButton btnPokemonSeleccionado;

    // -----------------------------------------------------------------
    // Constructores
    // -----------------------------------------------------------------

    /**
     * Constructor del panel.
     * @param pImagen Imagen del jugador
     */
    public PanelJugador( String pImagen)
    {

        setLayout( new BorderLayout( ) );

        etiquetaImagenJugador = new JLabel( );
        etiquetaImagenJugador.setPreferredSize( new Dimension( 250, 0 ) );
        etiquetaImagenJugador.setHorizontalAlignment( JLabel.CENTER );
        etiquetaImagenJugador.setIcon( new ImageIcon( RUTA+ pImagen+".PNG") );

        add( etiquetaImagenJugador, BorderLayout.WEST );

        etiquetaImagenPokemonSeleccionado = new JLabel( );
        etiquetaImagenPokemonSeleccionado.setPreferredSize( new Dimension( 250, 0 ) );
        etiquetaImagenPokemonSeleccionado.setHorizontalAlignment( JLabel.CENTER );

        add( etiquetaImagenPokemonSeleccionado, BorderLayout.EAST );

        panelPokemones = new JPanel( );
        panelPokemones.setLayout( new FlowLayout(FlowLayout.LEFT) );
        panelPokemones.setOpaque( false );
        add( panelPokemones, BorderLayout.SOUTH );
        
        setOpaque(false);

    }

    // -----------------------------------------------------------------
    // Métodos
    // -----------------------------------------------------------------

    /**
     * Retorna el pokemón seleccionado por el jugador.
     * @return Pokemón seleccionado.
     */
    public Pokemon darPokemonSeleccionado( )
    {
        return pokemonSeleccionado;
    }

    /**
     * Actualiza la información del jugador mostrada.
     * @param pPokemones Lista de pokemónes del jugador.
     * @param pokemonSeleccionado Pokemón seleccionado actualmente.
     */
    public void actualizar( ArrayList pPokemones, Pokemon pokemonSeleccionado )
    {

        BufferedImage bImagen;
        pokemones = pPokemones;
        panelPokemones.removeAll( );
        for( int i = 0; i < pPokemones.size( ); i++ )
        {
            try
            {
                Pokemon pokemon = ( Pokemon )pPokemones.get( i );
                JButton btPokemon = new JButton( "" );
                btPokemon.setRolloverEnabled( false );
                btPokemon.setBorder( new LineBorder( Color.ORANGE, 2 ) );
                btPokemon.setPreferredSize( new Dimension( 30, 50 ) );
                btPokemon.setHorizontalAlignment( JLabel.CENTER );
                btPokemon.setVerticalAlignment( JLabel.CENTER );
                btPokemon.addActionListener( this );
                btPokemon.setActionCommand( String.valueOf( i ) );
                btPokemon.setBorderPainted( false );
                if( pokemon.verificarPokemonDebilitado( ) )
                {
                    bImagen = ImageIO.read( new File( RUTA + pokemon.darNombre( ) + "MiniaturaInhabilitado.JPG" ) );
                }
                else
                {
                    bImagen = ImageIO.read( new File( RUTA + pokemon.darNombre( ) + "Miniatura.JPG" ) );
                }

                Image laImagen = bImagen.getScaledInstance( ( int ) ( 60 ), ( int ) ( 60 ), Image.SCALE_AREA_AVERAGING);
                btPokemon.setIcon( new ImageIcon( laImagen ) );
                if( pokemon.verificarPokemonDebilitado( ) )
                {
                    btPokemon.setEnabled( false );
                }
                else
                {
                    btPokemon.setEnabled( true );
                }
               
                panelPokemones.add( btPokemon );
            }
            catch( IOException e )
            {
                // TODO Auto-generated catch block
                e.printStackTrace( );
            }
        }

        etiquetaImagenPokemonSeleccionado.setIcon( new ImageIcon( RUTA + pokemonSeleccionado.darNombre( ) + ".PNG" ) );

    }

    /**
     * Manejo de los eventos de los botones.
     * @param pEvento Acción que generó el evento.
     */
    public void actionPerformed( ActionEvent pEvento )
    {

        int indice = Integer.parseInt( pEvento.getActionCommand( ) );
        JButton source = ( JButton )pEvento.getSource( );

        if( btnPokemonSeleccionado != null )
        {
            if( btnPokemonSeleccionado.equals( source ) )
            {
                btnPokemonSeleccionado.setBorderPainted( false );
                btnPokemonSeleccionado = null;
                pokemonSeleccionado = null;
            }
            else
            {
                btnPokemonSeleccionado.setBorderPainted( false );
                btnPokemonSeleccionado = source;
                source.setBorderPainted( true );
                Pokemon pokemon = ( Pokemon )pokemones.get( indice );
                pokemonSeleccionado = pokemon;
            }
        }
        else
        {
            btnPokemonSeleccionado = source;
            source.setBorderPainted( true );
            Pokemon pokemon = ( Pokemon )pokemones.get( indice );
            pokemonSeleccionado = pokemon;
        }


    }

}
