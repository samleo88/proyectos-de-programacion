1

00:00:00,000  -->  00:00:05,549
Hey guys, welcome back. In the last video
we learned about some directional

2

00:00:05,549  -->  00:00:10,500
navigation through some soup, and in this
video we're going to be combining a few

3

00:00:10,500  -->  00:00:14,190
of the things we've learned already to
do something really neat. So, i'm going to

4

00:00:14,190  -->  00:00:17,550
go ahead and create a new Python file

5

00:00:17,550  -->  00:00:26,910
called "images" and we're going to
import beautifulsoup, requests, pillow, and

6

00:00:26,910  -->  00:00:28,830
we're going to import the bytesIO.

7

00:00:28,830  -->  00:00:34,590
So let's go ahead and from, why can I
not type in here?

8

00:00:39,480  -->  00:00:48,480
Well, something happened to my keyboard, still working,

9

00:00:54,660  -->  00:00:58,230
it's messed up. Let me close this and try
and open it again,

10

00:01:01,140  -->  00:01:07,799
there we go. Don't know what that was but anyway let's jump into images.py. From

11

00:01:07,799  -->  00:01:21,869
"from bs4 import Beautifulsoup, going to "import requests" "from PIL import Image"

12

00:01:21,869  -->  00:01:26,009
and then "from io import BytesIO"

13

00:01:26,009  -->  00:01:38,040
So let's go ahead and get, let's get
a variable created called "search" so

14

00:01:38,040  -->  00:01:44,729
this is going to be another
interactive one. So "= input("search for:")"

15

00:01:44,729  -->  00:01:53,939
and then we need to build the "params = {"q": search}" so

16

00:01:53,939  -->  00:01:57,090
whatever we type in, then we're going to
create a request.

17

00:01:57,090  -->  00:02:03,149
So "r = requests.get

18

00:02:05,840  -->  00:02:18,200
("https://www.bing.com/images/search"), params=params)"

19

00:02:18,200  -->  00:02:21,410
So if you guys didn't notice yet what we're
going to do is we're going to be saving

20

00:02:21,410  -->  00:02:24,739
images from Bing based on our search,

21

00:02:24,739  -->  00:02:27,860
yeah, so let's go ahead and do that.

22

00:02:28,519  -->  00:02:33,920
So what we need to do is turn our page
that we've just searched for into some

23

00:02:33,920  -->  00:02:35,900
soup.

24

00:02:35,900  -->  00:02:48,260
So, "soup = BeautifulSoup(r.text, "html.parser")"

25

00:02:49,700  -->  00:02:55,099
Now what we need to do is grab each
image. So I've looked through here

26

00:02:55,099  -->  00:03:02,599
already and I found that each image is
stored in an "a" element, where is that it,

27

00:03:02,599  -->  00:03:04,160
and it has a class of thumb.

28

00:03:04,160  -->  00:03:09,019
I'm not sure if it's going to show that
here because it shows all this

29

00:03:09,019  -->  00:03:15,440
stuff, but this is all generated by
JavaScript after. So, basically the

30

00:03:15,440  -->  00:03:18,920
properties you see here won't be what
you get back. What you get back is an "a"

31

00:03:18,920  -->  00:03:24,950
element with a class of thumb, and then
the URL, the href of the element is

32

00:03:24,950  -->  00:03:29,930
equal to the actual location of the file.
So, I've already got that

33

00:03:29,930  -->  00:03:33,799
information now this looks a bit
different. So how we will do that is we will

34

00:03:33,799  -->  00:03:41,060
create a variable called "links = soup.findAll" going

35

00:03:41,060  -->  00:03:52,639
find all a attributes or elements with the class of thumb ("a", {"class": "thumb"})" Then basically we're

36

00:03:52,639  -->  00:04:00,319
going to go "for item in links:" What we
need to do is we need to actually get, we

37

00:04:00,319  -->  00:04:06,079
need to create a new request for each
item's URL, so we're going to go ahead

38

00:04:06,079  -->  00:04:13,669
and print img_url, this is going to be our
variable, or let's just type

39

00:04:13,669  -->  00:04:16,669
"img_obj = requests.get"

40

00:04:17,209  -->  00:04:27,229
and then in here we're going to pass
in the "(item.attrs["href"])" So this is

41

00:04:27,229  -->  00:04:33,410
going to get the file in a format
that we can read, now we couldn't just

42

00:04:33,410  -->  00:04:40,639
pass it the href element into an image.open call, it just wouldn't work. So

43

00:04:40,639  -->  00:04:43,789
we're also going to get the title of the
image. How we're going to do this,

44

00:04:43,789  -->  00:04:47,360
let's just type "title" that's going to be
our variable. We're gonna get the "= item"

45

00:04:47,360  -->  00:04:55,160
we're gonna get the ".attrs["href"]" and then what we're going to do

46

00:04:55,160  -->  00:05:01,490
because I guess with the image library
there's not an easy way to get a title

47

00:05:01,490  -->  00:05:05,270
of a file name, what we're going to do is
we're just going to split at the last "/"

48

00:05:05,270  -->  00:05:09,500
so anything after the last "/" is going to
be the filename. So as you can see here

49

00:05:10,039  -->  00:05:16,460
"/" would be the the actual
file name. So let's go ahead and split this,

50

00:05:16,460  -->  00:05:22,820
".split("/")" and then to
get the last element in a list in Python

51

00:05:22,820  -->  00:05:29,419
you go "[-1]" in the index box there.
So that's going to be the title that

52

00:05:29,419  -->  00:05:32,419
we're going to be using to save the
image, so let's go ahead and create our

53

00:05:32,419  -->  00:05:39,680
image. So, img "Image.open(BytesIO)" and then we're

54

00:05:39,680  -->  00:05:49,219
going to pass it in "(img_obj.content))" So there's our image we have it open,

55

00:05:49,219  -->  00:05:52,520
we're now going to save the image to an
images directory. So i'm going to go

56

00:05:52,520  -->  00:06:01,190
ahead and create a new directory, and i'm
going to call it,

57

00:06:03,620  -->  00:06:09,440
let's call it "scraped_images" so we're going to use that here. So we're going to

58

00:06:09,440  -->  00:06:15,289
go ahead and save the image here, so I "img.save" and then we're going to save to the

59

00:06:15,289  -->  00:06:21,020
current directory "("./scraped_images/" + title, )"

60

00:06:21,020  -->  00:06:24,020
to save it, so it's going to

61

00:06:24,020  -->  00:06:28,009
saved in that directory with its
original title or filename, and then

62

00:06:28,009  -->  00:06:34,610
we're just going to type "img.format)"
and that's it.

63

00:06:34,610  -->  00:06:42,830
So let's go ahead and start this up, see
if it all works as it should. So here

64

00:06:42,830  -->  00:06:45,830
we're going to search for "pizza"

65

00:06:47,720  -->  00:06:50,930
and I forgot to put some print statements
into their to see what it's doing, but

66

00:06:50,930  -->  00:06:56,030
let's just jump in here and as you can
see images are being generated and

67

00:06:56,030  -->  00:07:00,470
saved to the computer with their
original file names. Now this will go

68

00:07:00,470  -->  00:07:06,110
forever because i'm pretty sure Bing has,
well it'll go that far,

69

00:07:06,110  -->  00:07:09,889
so past the first load it won't pick up
anything because we're not actually

70

00:07:09,889  -->  00:07:15,800
scrolling down the page which Bing you
know checks for if you scroll a certain

71

00:07:15,800  -->  00:07:18,050
amount but we're not going to be
scrolling certain amount because we just

72

00:07:18,050  -->  00:07:22,039
pulled the dom from the internet, so I
think this is all it's going to save,

73

00:07:22,039  -->  00:07:26,030
actually, but it didn't stop yet so I
think so it's going to save a few more.

74

00:07:26,030  -->  00:07:33,620
Can't identify image, awesome. So,
that's how to save images and we could

75

00:07:33,620  -->  00:07:38,150
do that for, let's put a print
statement in here, i'm just going to

76

00:07:38,150  -->  00:07:50,990
print out the URL's. So print("Getting", item .attrs["href"])"

77

00:07:50,990  -->  00:07:53,419
print("Getting", item .attrs["href"])"

78

00:07:53,419  -->  00:07:57,590
So for each item that it has saved it's
going to then print that. So let's go ahead

79

00:07:57,590  -->  00:08:03,110
and start this again and I'm going to
search for "Skyrim wallpaper"

80

00:08:03,110  -->  00:08:07,400
Let's just say I want to scrape a bunch
of wallpapers off of the internet, it's

81

00:08:07,400  -->  00:08:11,270
going to do that. So if we come back over
here we're going to see that i'm going

82

00:08:11,270  -->  00:08:18,110
to start getting a folder full of Skyrim
wallpapers, and what we could do actually is

83

00:08:18,110  -->  00:08:23,449
you could extend this further to for
each time you search for something,

84

00:08:23,449  -->  00:08:27,110
instead of storing everything in the
scraped images, you could actually get the

85

00:08:27,110  -->  00:08:32,719
search term create a directory called
whatever search term was, and then save all

86

00:08:32,719  -->  00:08:36,120
images by filename into the appropriate

87

00:08:36,120  -->  00:08:40,800
directory. But, that's as far as we're
going to take this one.

88

00:08:40,800  -->  00:08:42,990
Thank you guys for watching, and I'll see
you guys in the next video.
