1

00:00:00,000  -->  00:00:05,490
Hey guys, welcome back. In the last video
we actually built a login script but it

2

00:00:05,490  -->  00:00:11,340
didn't actually do anything, it kind of
just it kind of just tested you know if

3

00:00:11,340  -->  00:00:15,330
the password's correct but we didn't
actually do anything with the password,

4

00:00:15,330  -->  00:00:18,539
we didn't do anything account-based, so
what we're going to get into in this

5

00:00:18,539  -->  00:00:23,580
video is what's known in computer
science as a session. So what a session

6

00:00:23,580  -->  00:00:28,890
is it's a way of keeping persistent data
synced up between a client, or an

7

00:00:28,890  -->  00:00:34,770
individual user, and the server. So, for
instance when you go to Facebook and you

8

00:00:34,770  -->  00:00:38,969
login with your email address and
password, what happens is facebook checks

9

00:00:38,969  -->  00:00:43,110
that the information is correct and if
it is correct and you've logged in,

10

00:00:43,649  -->  00:00:49,020
what it does is it sends information to
your internet browser telling the

11

00:00:49,020  -->  00:00:53,280
browser who you're logged in as, and
then your browser sends that information

12

00:00:53,280  -->  00:00:57,629
with each request that the server can
check if there's a session, what's

13

00:00:57,629  -->  00:01:03,000
the session username, and do stuff based
on that and generate pages. So, basically when

14

00:01:03,000  -->  00:01:06,780
you're on Facebook and on the top
bar there you click profile, or your name,

15

00:01:06,780  -->  00:01:11,220
not sure which it is now, it used to be just
the word profile, what happens is it

16

00:01:11,220  -->  00:01:16,740
takes you to a template page that
contains all your data, and it generates

17

00:01:16,740  -->  00:01:20,549
that based on session data. So what we're going to do is we're going to rig up

18

00:01:20,549  -->  00:01:26,790
our login form to a session management
bit of code. So let's go ahead and open PyCharm

19

00:01:26,790  -->  00:01:33,240
here, let's open up the controller,
and we're going to create the session.

20

00:01:33,240  -->  00:01:37,409
Now in order to do that what we first
need to do is disable the debug mode in

21

00:01:37,409  -->  00:01:43,049
Webpy because the debug mode interferes with the ability to run sessions, and I'm going

22

00:01:43,049  -->  00:01:46,409
to get that out of the way right now, and
so what we need to do is basically

23

00:01:46,409  -->  00:01:50,189
disable the debug mode. So in the error
messages that I've got before it provided

24

00:01:50,189  -->  00:01:53,460
a lot of information about the error
themselves and where the error was

25

00:01:53,460  -->  00:01:57,270
beginning and happening in the code, and
so that's debug mode, so we're going to

26

00:01:57,270  -->  00:02:04,590
turn that off. So, in the top your script
run "web.config.debug = False"

27

00:02:04,590  -->  00:02:09,750
and that's all we need to do
there. Now what we're going to have to do

28

00:02:09,750  -->  00:02:11,760
is actually change the order of render

29

00:02:11,760  -->  00:02:16,409
and app. The reason why we need to
do that is because we're going to do

30

00:02:16,409  -->  00:02:21,659
some code between app and render, and we need app to do that code, and then in

31

00:02:21,659  -->  00:02:24,989
the render method we need whatever we
write here, so we just need to change the

32

00:02:24,989  -->  00:02:31,680
order of that. So what we need to do here
is, and actually before we get into that

33

00:02:31,680  -->  00:02:35,250
we're going to create a way to logout.
And so the reason we're doing that is

34

00:02:35,250  -->  00:02:39,780
because when we start logging in we
might have problems, we want to log out

35

00:02:39,780  -->  00:02:44,129
and log back in, we need a way to do
that. So let's go ahead down here create

36

00:02:44,129  -->  00:02:51,239
a "class Logout:" let's "def "GET(self):"
and

37

00:02:51,239  -->  00:02:57,599
we're just going to run "session.kill( )"
and kill is a method so add those

38

00:02:57,599  -->  00:03:03,720
parentheses there, and then we're just
going to return "success" So

39

00:03:03,720  -->  00:03:08,760
basically what's going to happen is when
we go to /logout it's going to

40

00:03:08,760  -->  00:03:13,349
kill the session and then return success,
and so we're going to handle this with

41

00:03:13,349  -->  00:03:18,359
ajax, and so in JavaScript if we get this
return we know that we're logged out so

42

00:03:18,359  -->  00:03:23,519
we can redirect maybe to the login page,.so let's go ahead and create a log out

43

00:03:23,519  -->  00:03:33,989
route. Name it '/logout',  and we're going to connect it to the 'Logout', class, and now

44

00:03:33,989  -->  00:03:37,410
down here you'll notice that session is
underlined red and this because it's an

45

00:03:37,410  -->  00:03:42,720
undefined variable as of right now, so we
actually need to go ahead and create it.

46

00:03:42,720  -->  00:03:46,470
So this is going to be the most
important thing, well it's all important

47

00:03:46,470  -->  00:03:50,340
in this video, but this is going to be
the thing that actually instantiates the

48

00:03:50,340  -->  00:03:54,930
session. So go ahead and create a session variable "session

49

00:03:54,930  -->  00:04:03,180
= web.session.Session( )" and the second
session there has capital "S," and it's a

50

00:04:03,180  -->  00:04:05,489
method so go ahead and open up
parentheses.

51

00:04:05,489  -->  00:04:10,560
Now the first argument we're going to
pass this method is the actual "app,"

52

00:04:10,560  -->  00:04:12,630
instance.

53

00:04:12,630  -->  00:04:17,010
The second one we're going to pass it is
how we're going to store this persistent

54

00:04:17,010  -->  00:04:21,720
data, so in this case it's going to be
just stored on the disk.

55

00:04:21,720  -->  00:04:26,670
Let's go ahead and write "web.session.DiscStore( )" and

56

00:04:26,670  -->  00:04:30,570
we're going to give our storage unit a
name so I'm just going to call it

57

00:04:30,570  -->  00:04:35,730
"sessions" and i'm also going to pass in
another argument

58

00:04:35,730  -->  00:04:38,490
we're going to have to identify it by
keyword here, so go ahead and type

59

00:04:38,490  -->  00:04:44,700
", initializer=" and then we're going
to open up some "{ }" here and

60

00:04:44,700  -->  00:04:53,310
type 'user': 'none' And so this is we've
always got something here so we can

61

00:04:53,310  -->  00:04:57,030
check if the user is logged in. Now that
doesn't actually initialize it, we

62

00:04:57,030  -->  00:05:03,300
actually have to initialize the
initializer. So, go ahead and create a

63

00:05:03,300  -->  00:05:09,990
"session_data = session._

64

00:05:09,990  -->  00:05:17,880
initializer" So here we've actually
initialized our session. Go ahead and

65

00:05:17,880  -->  00:05:24,990
drop another line and we're going to
chain, well actually let me

66

00:05:24,990  -->  00:05:33,240
separate it like that. What we're going to
do is in our render method call here

67

00:05:33,240  -->  00:05:40,530
we're going to pass a "globals={ }" variable, and this is going to create global

68

00:05:40,530  -->  00:05:46,500
variables. So we're going to go ahead and
create 'session':

69

00:05:46,500  -->  00:06:00,090
"session_data,"  and let's say a user
we're going, well let's say 'current_user':

70

00:06:00,090  -->  00:06:12,210
It's going to be equal to let's just
say session data user, so

71

00:06:12,210  -->  00:06:15,750
"session_data["user"]" and

72

00:06:17,020  -->  00:06:21,430
that's what all we need to do. Now,
basically what that means is each one of

73

00:06:21,430  -->  00:06:24,699
these routes we don't have to change
that, we don't have to pass anything into

74

00:06:24,699  -->  00:06:28,539
this, but where we're creating them is in the global's and the render method, the session

75

00:06:28,539  -->  00:06:35,050
variable is always going to exist to any of
these routes in the HTML templates. So

76

00:06:35,050  -->  00:06:40,780
what we're going to do here, if I
just save this and run it we shouldn't

77

00:06:40,780  -->  00:06:49,509
get any errors. We should be able to go
to "localhost:8080" and we're

78

00:06:49,509  -->  00:06:54,340
getting an internal server error. So
let's go ahead and see why that is, and

79

00:06:54,340  -->  00:06:58,479
so we're missing one required positional
argument and that's because in home, yeah

80

00:06:58,479  -->  00:07:03,909
okay, so I actually defined it at some
point with logged in user. Let's just go

81

00:07:03,909  -->  00:07:11,620
ahead and change that, re-run the script,
refresh, and you'll see that our page is

82

00:07:11,620  -->  00:07:18,849
still right here. If we go to login we
actually haven't created the current

83

00:07:18,849  -->  00:07:23,919
user the session data that we want to
create. So, when a user logs in we need to

84

00:07:23,919  -->  00:07:33,550
actually instantiate that session. So
let's go ahead and login, no, check

85

00:07:33,550  -->  00:07:34,569
log in right here.

86

00:07:34,569  -->  00:07:38,529
So what we're going to do is if so is
correct is either going to be equal to

87

00:07:38,529  -->  00:07:42,699
false in which case is just going to
return this, or it's going to be equal to

88

00:07:42,699  -->  00:07:48,039
the user object. So if this is true that
means it's the user object. So what we're

89

00:07:48,039  -->  00:07:53,800
going to go ahead and do is we're going
to create session user, session data user

90

00:07:53,800  -->  00:08:01,479
there, so "session_data["user"] = isCorrect"  so we're

91

00:08:01,479  -->  00:08:08,620
basically setting session user to the
user object here. Go ahead and save this

92

00:08:08,620  -->  00:08:11,620
and refresh, we shouldn't get any errors,
and we don't.

93

00:08:12,340  -->  00:08:18,310
So what we need to do is we need to add
one thing into our javascript file and

94

00:08:18,310  -->  00:08:22,900
that's just to redirect. So when we
start a session we're going to have to

95

00:08:22,900  -->  00:08:26,800
refresh the page so we're just going to
redirect it to the home page, because I mean

96

00:08:26,800  -->  00:08:29,220
that makes sense, you don't stay on the
login form

97

00:08:29,220  -->  00:08:34,770
you're already logged in, so let's go
ahead and type "window.location.href

98

00:08:34,770  -->  00:08:40,860
= "/"; and this is basically just going to
redirect back into our home page.

99

00:08:41,669  -->  00:08:47,550
Alright, so we need to do one last thing
and here we're creating a global

100

00:08:47,550  -->  00:08:53,550
variable called session, so we're going
to just print that out here. We're going

101

00:08:53,550  -->  00:09:00,570
to say Hello $session" Now we should not
get an error message, we should be able

102

00:09:00,570  -->  00:09:04,650
to refresh, we don't have an error, so
let's go ahead and login. I believe the

103

00:09:04,650  -->  00:09:09,600
user I created in the last video was nick1 and the password was avocado1,

104

00:09:09,600  -->  00:09:18,240
awesome. So I did login successfully. So
what I'm going to do at this point is

105

00:09:18,240  -->  00:09:23,130
we've got a user and basically if I
refresh the page you'll see that the

106

00:09:23,130  -->  00:09:27,660
information stays persistent and that's
until you restart the server, so if I

107

00:09:27,660  -->  00:09:36,870
restart the server here, and refresh,
we're going to see Hello {'user': 'none'} and

108

00:09:36,870  -->  00:09:41,280
that's because there's no user. So what
we're going to do is we're going to

109

00:09:41,280  -->  00:09:54,990
create an if statement here, so "$if $session['user'] == 'none':"

110

00:09:55,589  -->  00:09:58,589
"&lt;h1&gt;Hello

111

00:09:59,310  -->  00:10:08,010
CodeWizard&lt;/h1&gt;" then go "$else:" say hello

112

00:10:08,520  -->  00:10:23,490
user. Still getting invalid syntax...

113

00:10:35,360  -->  00:10:37,710
oh...

114

00:10:37,710  -->  00:10:47,700
I accidently put a dollar sign there that
didn't, that didn't need to, so yeah, there

115

00:10:47,700  -->  00:10:49,020
we go.

116

00:10:49,020  -->  00:10:52,890
So as you can see it says Hello CodeWizard, let me just check the logic here

117

00:10:52,890  -->  00:10:57,450
to make sure we're doing it correctly, we
are setting user, I believe, yes, we are

118

00:10:57,450  -->  00:11:03,210
setting user to the actual user object.
So, once we get into the user object we

119

00:11:03,210  -->  00:11:10,260
should be able to type "['name']" to access
that, so let's go ahead and restart this,

120

00:11:10,260  -->  00:11:20,820
let's login as nick1, and avocado1, and
you'll see it says Hello nick.
