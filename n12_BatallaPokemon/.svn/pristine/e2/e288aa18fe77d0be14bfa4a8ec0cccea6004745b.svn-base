/**
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Universidad de los Andes (Bogotá - Colombia)
 * Departamento de Ingeniería de Sistemas y Computación 
 * Licenciado bajo el esquema Academic Free License version 2.1 
 *
 * Proyecto Cupi2 (http://cupi2.uniandes.edu.co)
 * Ejercicio: n12_batallaPokemon
 * Autor: Equipo Cupi2 2016
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 */

package uniandes.cupi2.batallaPokemon.cliente.mundo;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;

import uniandes.cupi2.batallaPokemon.servidor.mundo.RegistroJugador;

/**
 * Clase que representa un jugador.<br>
 * <b>inv:</b><br>
 * pokemonesJugador != null. No puede tener dos pokémon con el mismo nombre.
 */
public class Jugador
{

    // -----------------------------------------------------------------
    // Atributos
    // -----------------------------------------------------------------

    /**
     * Nombre del jugador.
     */
    private String nombreJugador;

    /**
     * Alias del jugador.
     */
    private String alias;

    /**
     * Ruta de la imagen del avatar del jugador.
     */
    private String imagenAvatar;

    /**
     * Lista de pokémon que tiene el jugador.
     */
    private ArrayList pokemonesJugador;

    // -----------------------------------------------------------------
    // Constructores
    // -----------------------------------------------------------------

    /**
     * Construye un nuevo jugador. <br>
     * Inicializa la lista de pokémon.
     */
    public Jugador( )
    {

        pokemonesJugador = new ArrayList( );
        verificarInvariante( );

    }

    // -----------------------------------------------------------------
    // Métodos
    // -----------------------------------------------------------------

    /**
     * Retorna el nombre del jugador.
     * @return Nombre del jugador.
     */
    public String darNombreJugador( )
    {
        return nombreJugador;
    }

    /**
     * Retorna el alias del jugador.
     * @return Alias del jugador.
     */
    public String darAlias( )
    {
        return alias;
    }

    /**
     * Retorna la imagen del jugador.
     * @return Imagen del jugador.
     */
    public String darImagenAvatar( )
    {
        return imagenAvatar;
    }

    /**
     * Retorna la lista de pokémon del jugador.
     * @return Lista con los pokémon del jugador.
     */
    public ArrayList darPokemonesJugador( )
    {
        return pokemonesJugador;
    }

    /**
     * Modifica el nombre del jugador.
     * @param pNombre Nuevo nombre del jugador.
     */
    public void modificarNombreJugador( String pNombre )
    {
        nombreJugador = pNombre;
    }

    /**
     * Modifica el alias del jugador.
     * @param pAlias Nuevo alias del jugador.
     */
    public void modificarAlias( String pAlias )
    {
        alias = pAlias;
    }

    /**
     * Modifica la imagen del avatar del jugador.
     * @param pImagenAvatar Nuevo avatar del jugador.
     */
    public void modificarImagenAvatarJugador( String pImagenAvatar )
    {
        imagenAvatar = pImagenAvatar;
    }

    /**
     * Retorna la cantidad de pokémon con salud en cero.
     * @return Cantidad de pokémon debilitados.
     */
    public int darCantidadPokemonesDebilitados( )
    {
        int cantidadPokemonesDebilitados = 0;

        for( int i = 0; i < pokemonesJugador.size( ); i++ )
        {
            double saludPokemon = ( ( Pokemon )pokemonesJugador.get( i ) ).darSalud( );
            if( saludPokemon == 0.0 )
            {
                cantidadPokemonesDebilitados++;
            }
        }

        return cantidadPokemonesDebilitados;

    }

    /**
     * Ingresa los pokémon seleccionados por el jugador.
     * @param pPokemonesSeleccionados Lista de pokémon.
     * @param pPokemonesExistentes Lista de pokémon existentes para seleccionar en el juego.
     * @return Nombre del pokémon seleccionado inicialmente.
     */
    public String ingresarPokemones( ArrayList pPokemonesSeleccionados, Pokemon[] pPokemonesExistentes )
    {
        for( int i = 0; i < pPokemonesSeleccionados.size( ); i++ )
        {
            Pokemon pokemonSeleccionado = pPokemonesExistentes[ ( int )pPokemonesSeleccionados.get( i ) ];
            pokemonesJugador.add( pokemonSeleccionado );
        }

        return ( ( Pokemon )pokemonesJugador.get( 0 ) ).darNombre( );

    }

    // -----------------------------------------------------------------
    // Invariante
    // -----------------------------------------------------------------

    /**
     * Verifica el invariante de la clase Jugador.<br>
     * <b>inv: </b><br>
     * pokemonesJugador != null.<br>
     * No existen dos pokemón con el mismo nombre. <br>
     */
    private void verificarInvariante( )
    {
        assert ( pokemonesJugador != null ) : "La lista de pokémon no puede ser nula.";
        assert ( !hayPokemonRepetidos( ) ) : "No pueden haber dos pokémon con el mismo nombre.";
    }

    /**
     * Indica si existen o no dos pokémon con el mismo nombre.
     * @return True si existen dos pokémon con el mismo nombre, false de lo contrario.
     */
    private boolean hayPokemonRepetidos( )
    {
        boolean existen = false;

        for( int i = 0; i < pokemonesJugador.size( ) && !existen; i++ )
        {
            Pokemon pokemon1 = ( Pokemon )pokemonesJugador.get( i );

            for( int j = 0; j < pokemonesJugador.size( ) && !existen; j++ )
            {
                Pokemon pokemon2 = ( Pokemon )pokemonesJugador.get( j );
                if( pokemon1.darNombre( ).equals( pokemon2.darNombre( ) ) && i != j )
                {
                    existen = true;
                }
            }
        }
        return existen;
    }

}
