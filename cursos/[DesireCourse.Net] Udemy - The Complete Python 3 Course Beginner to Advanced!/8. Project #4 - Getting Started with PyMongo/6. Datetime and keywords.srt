1

00:00:00,000  -->  00:00:05,069
That last video was really quick. So
that's neat, I thought that was going to

2

00:00:05,069  -->  00:00:09,090
do that included in another video, but
it is it's own thing so where I didn't talk about

3

00:00:09,090  -->  00:00:13,320
it I just thought I would. Now in this
video we haven't learned about datetime

4

00:00:13,320  -->  00:00:17,250
I don't think it all in Python yet, so
we're going to break away from PyMongo

5

00:00:17,250  -->  00:00:20,430
for a moment to learn a bit about
datetime, and then we're going to learn

6

00:00:20,430  -->  00:00:26,580
how to use datetime with PyMongo. So
normally when you insert an object into

7

00:00:26,580  -->  00:00:32,700
the database or into Mongo here you
would want to capture the date that it is

8

00:00:32,700  -->  00:00:37,950
entered. Now let's say I'm running a blog
and every time I enter a blog post I

9

00:00:37,950  -->  00:00:44,100
obviously want to have the datetime
of when that post was posted, and then we

10

00:00:44,100  -->  00:00:51,059
can use that to organize and just find
certain dates, so it makes it easier for

11

00:00:51,059  -->  00:00:53,129
the user to navigate it.

12

00:00:53,129  -->  00:01:00,390
You can also use this when using stuff
like PyDjango or Webpy which we're

13

00:01:00,390  -->  00:01:04,710
going to be getting both into those in
the future as well. So let's go ahead and

14

00:01:04,710  -->  00:01:10,500
learn about datetime. What we need to do
is import datetime, so "import datetime" here.

15

00:01:11,100  -->  00:01:17,759
Datetime is a pre-packaged Python package, it ships with it by default so you don't

16

00:01:17,759  -->  00:01:25,530
need to install anything. Now, let's set
the current date here in a variable and

17

00:01:25,530  -->  00:01:37,920
that's not very "peppy" so "current_date
= datetime.datetime.now( )"

18

00:01:37,920  -->  00:01:45,689
If we print out "current_date" it's going
to print the exact date that it is right

19

00:01:45,689  -->  00:01:52,500
now, for example it's (2016, 9, 1, 11, 33, 26) and

20

00:01:52,500  -->  00:01:56,939
not too sure what that one is, but that's
beyond the scope of what we're going to

21

00:01:56,939  -->  00:02:01,320
be using with for. So, that's how to
create a current date and now you can

22

00:02:01,320  -->  00:02:07,979
also pass these arguments into a
date to create a very specific date. So

23

00:02:07,979  -->  00:02:12,819
let's go ahead and create

24

00:02:12,819  -->  00:02:19,450
"old_date = datetime.datetime(

25

00:02:19,450  -->  00:02:27,519
2009, 8, 11)" Then this is going to

26

00:02:27,519  -->  00:02:32,469
build an old date of August 8, 2009. So what we're going to

27

00:02:32,469  -->  00:02:36,069
do is we're going to insert a document
with the current date, and then we're

28

00:02:36,069  -->  00:02:37,989
going to find all documents

29

00:02:37,989  -->  00:02:42,579
newer than this date. So it's going
to find the documents that we've

30

00:02:42,579  -->  00:02:50,949
inserted with currently current date. We're
going to insert this object right here

31

00:02:50,949  -->  00:02:53,799
"uid = Users.insert({

32

00:02:53,799  -->  00:03:07,569
"username": "ffie", "date": current_date})" Let's go ahead and

33

00:03:07,569  -->  00:03:12,400
insert that. Just make sure that it got
inserted and it did, and we see that the

34

00:03:12,400  -->  00:03:14,799
date has been set to today.

35

00:03:14,799  -->  00:03:21,819
Now this gets translated into a Mongo
Date Stamp, and that's you can see that

36

00:03:21,819  -->  00:03:26,739
here the type is a date stamp, so that's neat. Now we're going to go ahead and

37

00:03:26,739  -->  00:03:34,689
talk about different operators, less than
and greater than basically. Let's go ahead

38

00:03:34,689  -->  00:03:38,109
and try and find users here, we're just
going to count the objects that we get

39

00:03:38,109  -->  00:03:43,269
back. So "Users.find( )" and all we're going
to be looking for in here is

40

00:03:43,269  -->  00:03:48,790
"date": and then you put
another dictionary object here as the

41

00:03:48,790  -->  00:03:55,150
value for the date "{"$gt": and if you type "gt" that means

42

00:03:55,150  -->  00:04:03,250
greater than, and write "old_date}})"
that's our object. So gt means greater

43

00:04:03,250  -->  00:04:08,259
than so any date any object or document
that has a date greater than this is

44

00:04:08,259  -->  00:04:09,189
going to be returned.

45

00:04:09,189  -->  00:04:15,370
You can use "gte" which means greater than or equal to, you can use "lt" for less

46

00:04:15,370  -->  00:04:22,599
than, or "lte" for less than or equal to. So for right now we're going to find all

47

00:04:22,599  -->  00:04:24,880
documents that are newer than

48

00:04:24,880  -->  00:04:29,500
old date and we're gonna ".count" them
for now, and you can see we have two and

49

00:04:29,500  -->  00:04:33,610
that's this one right here, and I believe
that one right there as well, this one

50

00:04:33,610  -->  00:04:40,240
was inserted in the last video. So that's
how you can use dates to find a document.

51

00:04:40,240  -->  00:04:47,230
Now, let's say we want to find all
documents with a date less than that.

52

00:04:47,230  -->  00:04:52,570
It's going to return 0 and so in these
documents up here we don't have a date

53

00:04:52,570  -->  00:04:59,380
at all, so the non-existence of a date
does not correlate to a less than date,

54

00:04:59,380  -->  00:05:04,180
it just means there's no date. So, what
happens when we want to find documents

55

00:05:04,180  -->  00:05:10,660
based on if a field exists or not? And so
that's basically what we're going to do

56

00:05:10,660  -->  00:05:11,380
next.

57

00:05:11,380  -->  00:05:21,850
So let's go ahead and type "Users.find({"date":" and then we're going to go ahead

58

00:05:21,850  -->  00:05:26,080
and also add another dictionary object
here "{ }}).count( )" we're going to count these as well,

59

00:05:26,080  -->  00:05:34,270
and what we're going to do is use the keyword which starts with a "$exists":

60

00:05:34,270  -->  00:05:40,060
and then type "True" this needs to be the
boolean operator of Python, and you'll

61

00:05:40,060  -->  00:05:48,250
see that we have 2 documents. Now,
another thing that I want to talk about

62

00:05:48,250  -->  00:05:52,750
is if something is not equal to
something. So we have I believe two

63

00:05:52,750  -->  00:05:57,340
objects with the username of yet
another, let's go ahead and find a

64

00:05:57,340  -->  00:06:04,720
document or any documents that have a
username that doesn't equal yet another.

65

00:06:04,720  -->  00:06:12,820
So, let's go ahead and type "username" and then open up another dictionary object

66

00:06:12,820  -->  00:06:21,910
here, "{"$ne": "yetanother"}" and then
the term that you want to find that it is

67

00:06:21,910  -->  00:06:26,920
not equal to. So, again this basically
means we're going to be looking for the

68

00:06:26,920  -->  00:06:31,780
field username, so that's all this is
concerned with, and we need to find

69

00:06:31,780  -->  00:06:36,360
documents where the user name is not
equal to yet another. Let's go ahead and

70

00:06:36,360  -->  00:06:43,259
to return that. So, that's a few more
things that are going to make us a lot

71

00:06:43,259  -->  00:06:47,639
stronger with PyMongo going forward,
and in the next video we're going to be

72

00:06:47,639  -->  00:06:49,590
learning about indexes.
